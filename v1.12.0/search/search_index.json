{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Landing Zone Accelerator on AWS","text":"<p>The Landing Zone Accelerator on AWS (LZA) is architected to align with AWS best practices and in conformance with multiple, global compliance frameworks. We recommend customers deploy AWS Control Tower as the foundational landing zone and enhance their landing zone capabilities with Landing Zone Accelerator. These complementary capabilities provides a comprehensive low-code solution across 35+ AWS services to manage and govern a multi-account environment built to support customers with highly-regulated workloads and complex compliance requirements. AWS Control Tower and Landing Zone Accelerator help you establish platform readiness with security, compliance, and operational capabilities.</p> <p>Landing Zone Accelerator is provided as an open-source project that is built using the AWS Cloud Development Kit (CDK). You install directly into your environment to get full access to the infrastructure as code (IaC) solution. Through a simplified set of configuration files, you are able to configure additional functionality, controls and security services (eg. AWS Managed Config Rules, and AWS Security Hub), manage your foundational networking topology (eg. VPCs, Transit Gateways, and Network Firewall), and generate additional workload accounts using the AWS Control Tower Account Factory.</p> <p>There are no additional charges or upfront commitments required to use Landing Zone Accelerator on AWS. You pay only for AWS services enabled in order to set up your platform and operate your controls. This solution can also support non-standard AWS partitions, including AWS GovCloud (US), and the US Secret and Top Secret regions.</p> <p>For an overview and solution deployment guide, please visit Landing Zone Accelerator on AWS</p> <p>Important</p> <p>This solution will not, by itself, make you compliant. It provides the foundational infrastructure from which additional complementary solutions can be integrated. The information contained in this solution implementation guide is not exhaustive. You must be review, evaluate, assess, and approve the solution in compliance with your organization\u2019s particular security features, tools, and configurations. It is the sole responsibility of you and your organization to determine which regulatory requirements are applicable and to ensure that you comply with all requirements. Although this solution discusses both the technical and administrative requirements, this solution does not help you comply with the non-technical administrative requirements.</p> <p>Anonymized data collection</p> <p>This solution collects anonymized operational metrics to help AWS improve the quality of features of the solution. For more information, including how to disable this capability, please see the implementation guide.</p>"},{"location":"installation/","title":"Installation","text":"<p>For a full overview on installation of the solution, you can follow the step-by-step instructions in the Deploy the solution section of the solution Implementation Guide. Alternatively, you may follow the steps below to locally synthesize and deploy the solution installer template from source code.</p>"},{"location":"installation/#creating-an-installer-stack","title":"Creating an Installer Stack","text":"<p>The Installer Stack CDK application can be deployed using a CloudFormation template produced by completing a CDK synthesis on a local copy of the solution source code. After synthesis, the template can either be deployed using the AWS CLI or the AWS Management Console. Below are the steps for completing the deployment of the Installer stack.</p>"},{"location":"installation/#1-build-the-installer-stack-for-deployment","title":"1. Build the Installer stack for deployment","text":"<ol> <li> <p>Install dependencies for the Installer stack</p> <ul> <li>NodeJS</li> <li>AWS CDK</li> <li>Yarn</li> <li>AWS CLI</li> </ul> </li> <li> <p>Install project dependencies <pre><code>cd &lt;rootDir&gt;/source\nyarn install\n</code></pre></p> </li> <li> <p>To run the CDK synthesis <pre><code>cd &lt;rootDir&gt;/source/packages/@aws-accelerator/installer\nyarn build &amp;&amp; yarn cdk synth\n</code></pre></p> </li> </ol> <p>After running these commands, the Installer stack template will be saved to <code>&lt;rootDir&gt;/source/packages/@aws-accelerator/installer/cdk.out/AWSAccelerator-InstallerStack.template.json</code></p> <p>Note</p> <p><code>&lt;rootDir&gt;</code> is the local directory where you have cloned the solution source code. For more information on using the development toolchain, please see Development Dependencies.</p>"},{"location":"installation/#2-create-a-github-personal-access-token","title":"2. Create a GitHub personal access token","text":"<p>Follow the instructions on GitHub Docs to create a personal access token (Classic).</p> <p>When creating the token select <code>public_repo</code> for the selected scope.</p>"},{"location":"installation/#3-store-token-in-secrets-manager","title":"3. Store Token in Secrets Manager","text":"<p>You must store the personal access token in Secrets Manager in the account and region the solution will be deployed to.</p> <ol> <li>In the AWS Management Console, navigate to Secrets Manager</li> <li>Click Store a new secret</li> <li>On the Choose secret type step select Other type of secret</li> <li>Select the Plaintext tab</li> <li>Completely remove the example text and paste your secret with no formatting no leading or trailing spaces</li> <li>Select the <code>aws/secretsmanager</code> AWS-managed KMS key or a customer-managed key that you own</li> <li>Click Next</li> <li>On the Configure secret step, set the Secret name to accelerator/github-token</li> <li>On the Configure rotation step, click Next</li> <li>On the Review step, click Store</li> </ol>"},{"location":"installation/#4-deploy-the-installer-stack","title":"4. Deploy the Installer stack","text":"<ol> <li>Configure the AWS CLI CloudFormation command for the Installer stack</li> <li>Create an S3 bucket and copy the generated template file. <pre><code>cd &lt;rootDir&gt;/source/packages/@aws-accelerator/installer\nexport BUCKET_NAME=&lt;bucket name&gt;\naws s3 mb s3://$BUCKET_NAME\nexport ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)\naws s3api head-bucket --bucket $BUCKET_NAME --expected-bucket-owner $ACCOUNT_ID\naws s3 cp ./cdk.out/AWSAccelerator-InstallerStack.template.json s3://$BUCKET_NAME\n</code></pre></li> <li>Create the Installer stack with AWS CLI command: <pre><code>aws cloudformation create-stack --stack-name AWSAccelerator-InstallerStack --template-url https://$BUCKET_NAME.s3.&lt;region&gt;.amazonaws.com/AWSAccelerator-InstallerStack.template.json \\\n--parameters ParameterKey=RepositoryName,ParameterValue=&lt;Repository_Name&gt; \\\nParameterKey=RepositoryBranchName,ParameterValue=&lt;Branch_Name&gt; \\\nParameterKey=ManagementAccountEmail,ParameterValue=&lt;Management_Email&gt; \\\nParameterKey=LogArchiveAccountEmail,ParameterValue=&lt;LogArchive_Email&gt; \\\nParameterKey=AuditAccountEmail,ParameterValue=&lt;Audit_Email&gt; \\\nParameterKey=EnableApprovalStage,ParameterValue=Yes \\\nParameterKey=ApprovalStageNotifyEmailList,ParameterValue=&lt;Comma_Delimited_Notify_Emails&gt; \\\nParameterKey=ControlTowerEnabled,ParameterValue=Yes \\\n--capabilities CAPABILITY_IAM\n</code></pre></li> <li>(Optional) Alternate deployment of CloudFormation via AWS console:<ol> <li>From your Management account, navigate to CloudFormation page in the AWS console</li> <li>Select \u2018Create Stack\u2019 and from the dropdown pick \u2018with new resources (standard)\u2019</li> <li>For the prerequisite template, select \u2018Template is ready\u2019</li> <li>When specifying the template, select \u2018Upload a template file\u2019</li> <li>Ensure that you select the correct file \u2018AWSLandingZoneAccelerator-InstallerStack.template.json\u2019</li> <li>Fill out the required parameters in the UI, and create the stack once the parameters are inputted.</li> </ol> </li> </ol>"},{"location":"developer-guide/","title":"Developer Guide","text":"<p>This section contains guidance about installing Landing Zone Accelerator package dependencies and best practices to follow when contributing code to the solution.</p> <p>Subpages</p> <ul> <li>Development Dependencies</li> <li>Package Dependencies</li> <li>Command Line Interface and Package Scripts</li> <li>Architecture and Design Philosophy</li> <li>Feature Development</li> <li>Commit messages</li> <li>Documentation Guidelines</li> <li>Using JSON Schema</li> <li>Module Development</li> </ul> <p>See also</p> <ul> <li>Implementation Guide - Developer Guide</li> </ul>"},{"location":"developer-guide/commits/","title":"Commit messages","text":"<p>We adhere to the Conventional Commits style. Commit messages should be concise and descriptive. Describe the intent of the change with as few words as possible.</p> <p>Structure of Commit Messages: *** Type(Component): Description</p>"},{"location":"developer-guide/commits/#type","title":"Type","text":"<ul> <li><code>fix</code> - Fixes a bug</li> <li><code>feat</code> - Adds a new feature</li> <li><code>chore</code> - Covers administrative tasks, documentation updates, or changes that do not affect the code directly</li> </ul>"},{"location":"developer-guide/commits/#component-in-parentheses","title":"Component (in parentheses)","text":"<p>Specifies the part of the codebase effected. Examples include: <code>module</code>, <code>guardduty</code>, <code>config</code>, <code>constructs</code>, <code>test</code>, <code>kms</code>, <code>sample-config</code></p>"},{"location":"developer-guide/commits/#description","title":"Description","text":"<p>Brief intent of the change</p>"},{"location":"developer-guide/commits/#examples-of-commit-message","title":"Examples of Commit Message","text":"<p>The full message should look something like:</p> <ul> <li>Bug Fixes:</li> <li><code>fix(kms): fixed CWL CMK condition</code></li> <li><code>fix(iam): prevents cdk execution role from assuming vpc trust policy</code></li> <li>New Features:</li> <li><code>feat(orgs): allowing chatbot policies to be set in organization config</code></li> <li>Chores and Maintenance:</li> <li><code>chore(sample-config): disable event bus policy sample config</code></li> <li><code>chore(test): add audit manager integration testing gitlab ci job</code></li> </ul>"},{"location":"developer-guide/dependencies/","title":"Development Dependencies","text":"<p>The section outlines the development toolchain for Landing Zone Accelerator.</p>"},{"location":"developer-guide/dependencies/#system-dependencies","title":"System dependencies","text":"<ul> <li>NodeJS 16.x or above - NodeJS must be installed on your system</li> <li>AWS CDK CLI - AWS CDK tookit CLI must be installed via NPM</li> <li>Yarn - Yarn dependency manager must be installed via NPM</li> </ul> <p>You may install the remaining development dependencies using the following commands: <pre><code>cd &lt;rootDir&gt;/source\nyarn install\n</code></pre></p> <p>Note</p> <p><code>&lt;rootDir&gt;</code> is the local directory where you have cloned the solution source code.</p>"},{"location":"developer-guide/dependencies/#core-dependencies","title":"Core dependencies","text":"<ul> <li>aws-cdk-lib - AWS CDK library</li> <li>constructs - AWS constructs library</li> <li>esbuild - used to package and minify JavaScript code</li> <li>eslint - used to provide rules for code quality</li> <li>jest - unit testing framework</li> <li>jsii - allows code in any language to naturally interact with JavaScript classes</li> <li>lerna - used to manage the multiple packages in the project</li> <li>ts-node - execution environment for TypeScript</li> <li>typedoc - used to document libraries built for the accelerator</li> <li>typescript - project is written in TypeScript</li> </ul>"},{"location":"developer-guide/dependencies/#additional-dependenciesplugins","title":"Additional dependencies/plugins","text":"<ul> <li>@types/jest - TypeScript type definitions for jest unit testing framework</li> <li>@types/node - TypeScript type definitions for NodeJS</li> <li>@typescript-eslint/eslint-plugin - TypeScript plugin for eslint</li> <li>@typescript-eslint/parser - allows eslint to parse TypeScript code</li> <li>eslint-config-prettier - turns off all rules that are unnecessary or might conflict with Prettier</li> <li>eslint-plugin-jest - jest plugin for eslint</li> <li>eslint-plugin-prettier - runs Prettier as an ESLint rule and reports differences as individual ESLint issues</li> <li>fs-extra - adds file system methods that aren't included in the native fs module and adds promise support to the fs methods</li> <li>jest-junit - A Jest reporter that creates compatible junit xml files</li> <li>jsii-pacmak - Generates ready-to-publish language-specific packages for jsii modules</li> <li>ts-jest - A Jest transformer with source map support that lets you use Jest to test projects written in TypeScript</li> </ul>"},{"location":"developer-guide/design/","title":"Architecture and Design Philosophy","text":"<p>This section outlines the overall design and patterns used in the Landing Zone Accelerator to automate the deployment of AWS resources. For additional information, please see the Architecture overview and Architecture details sections of the Implementation Guide.</p>"},{"location":"developer-guide/design/#overall-deployment-strategy","title":"Overall Deployment Strategy","text":"<p>The LZA takes a configuration-based approach to deploying AWS resources across a set of AWS accounts we will refer to as the \"deployment environment.\" The LZA pipeline ingests a set of configuration files provided by the user and transforms the desired configuration to a set of AWS CloudFormation stacks synthesized using the AWS CDK. These stacks are deployed via AWS CodePipeline in a logically ordered set of stages to account for dependencies between various resources.</p> <p>Most stages of the core pipeline initiate an AWS CodeBuild job that runs the Core Command Line Interface (above) with appropriate arguments. The two most commonly run toolkit commands are synth and deploy to synthesize and deploy the CloudFormation templates. For example, during the Logging stage the following commands are run: <pre><code>// Synthesize CloudFormation templates\nyarn run ts-node --transpile-only cdk.ts synth --stage operations --config-dir /path/to/aws-accelerator-config/ --partition aws\n\n// Deploy CloudFormation templates\nyarn run ts-node --transpile-only cdk.ts deploy --stage network-vpc --require-approval any-change --config-dir /path/to/aws-accelerator-config/ --partition aws --app cdk.out\n</code></pre></p> <p>These commands execute the core logic of the CDK, contained in <code>source/packages/@aws-accelerator/accelerator</code>. Specifically, this command uses <code>cdk.ts</code> as an entrypoint to invoke <code>lib/accelerator.ts</code>, which executes parallel instances of <code>lib/toolkit.ts</code> to each synthesize or deploy a single CloudFormation stack for each unique pair of account and region in the deployment environment. The above command would synthesize a set of CloudFormation stacks with names following the pattern: <pre><code>AWSAccelerator-LoggingStack-${ACCOUNT_ID}-${REGION}\n</code></pre></p>"},{"location":"developer-guide/design/#accelerator","title":"Accelerator","text":"<p>The accelerator module includes the core LZA engine logic and defines each stack deployed by the LZA pipeline.</p>"},{"location":"developer-guide/design/#stacks","title":"Stacks","text":"<p>AWS resources deployed by LZA are grouped by function as described in the core pipeline page. For each stage, there is at least one corresponding class located in <code>source/packages/@aws-accelerator/accelerator/lib/stacks</code>. Using our example above, the logic defining the contents of the Logging stack is defined in <code>accelerator/lib/stacks/logging-stack.ts</code>. The logic contained in the stack evaluates the parsed configuration and accordingly adds CloudFormation resources and CDK constructs to define the AWS resources in scope.</p>"},{"location":"developer-guide/design/#when-would-i-add-or-modify-a-stack","title":"When would I add or modify a stack?","text":"<p>Changes are made at the stack level when creating new resources via LZA or modifying the deployment method for existing deployments. Most feature requests will require changes to at least one Stack class.</p>"},{"location":"developer-guide/design/#config","title":"Config","text":"<p>The accepted format of the YAML files defined in the <code>aws-accelerator-config</code> configuration repository is defined within <code>source/packages/@aws-accelerator/config</code>. For example, valid types within the <code>global-config.yaml</code> are defined in <code>config/lib/global-config.ts</code>. Within these classes we determine the accepted properties and options for the deployment of AWS services. This module also includes a <code>/validation</code> subdirectory that contains code to verify the customer-provided set of YAML files is valid during the Build phase of the pipeline. </p>"},{"location":"developer-guide/design/#when-would-i-add-or-modify-a-config","title":"When would I add or modify a config?","text":"<p>Changes are made to the config files when enabling the creation of new resource types via LZA or adding additional configuration options. This is a good place to start development of a new feature as it forces you to consider the options to provide customers when using a new feature.</p>"},{"location":"developer-guide/design/#constructs","title":"Constructs","text":"<p>As defined by CDK:</p> <p>Constructs are the basic building blocks of AWS CDK apps. A construct represents a \"cloud component\" and encapsulates everything AWS CloudFormation needs to create the component.</p> <p>LZA uses constructs to abstract more complex logic from the Stack classes to modular, well-defined components. Constructs may be used to deploy a single CloudFormation resource, a set of related resources, or any custom resources required by the Stacks. The LZA includes its constructs in the <code>source/packages/@aws-accelerator/constructs</code> directory.</p>"},{"location":"developer-guide/design/#when-would-i-add-or-modify-a-construct","title":"When would I add or modify a construct?","text":"<p>Constructs are created or modified when there is a significant code addition to facilitate the deployment of new resources. Constructs should be used to minimize the amount of business logic with the Stack classes.</p>"},{"location":"developer-guide/doc-guidelines/","title":"Documentation Guidelines","text":"<p>This section outlines the recommended documentation style guidelines to use when developing features for the Landing Zone Accelerator on AWS.</p>"},{"location":"developer-guide/doc-guidelines/#typedocs","title":"TypeDocs","text":"<p>This solution uses the TSDoc standard to annotate configuration classes with helpful metadata. TSDoc uses TypeScript's multi-line comment style in order to find and generate documentation for classes and methods. When developing new features for the LZA, please keep the following in mind.</p>"},{"location":"developer-guide/doc-guidelines/#helpful-tips","title":"Helpful Tips","text":"<ul> <li>If you are developing new configuration APIs in the <code>@aws-accelerator/config</code> module, it is highly recommended to annotate your class and its properties with descriptive metadata. This added context helps users gain an understanding of how to customize the configuration for their unique organizational needs. Keep reading to following sections for style guidelines and examples to follow when developing class annotations.</li> <li>TSDoc playground is a useful tool for testing your documentation code and TSDoc's built-in tags. </li> <li>You may run <code>yarn docs</code> from the source directory in your local development environment to generate docs with changes you've made. The default output folder is <code>./source/docs</code>.</li> </ul>"},{"location":"developer-guide/doc-guidelines/#recommended-structure-and-examples","title":"Recommended Structure and Examples","text":"<p>The following style should be used for documenting classes, methods, and class properties.</p> <ul> <li>There should be a single space before and after the asterisk on each line of the multi-line comment.</li> <li>There should be a break between the description and any parameters/return values (i.e. a line with just an asterisk).</li> <li>Content Ordering:<ul> <li>Breadcrumb trail <code>@link</code> -- this should follow the full configuration object path so it is easier to navigate between nested configurations.</li> <li>Description of class/property:<ul> <li>Is the class/property optional? Include <code>(OPTIONAL)</code> in the description.</li> <li>Include links to public AWS documentation when relevant to do so. For example, link to the What is Amazon VPC? documentation for the VPCConfig class.</li> <li>Provide a high-level overview of the service/feature. Put yourself in the shoes of someone that doesn't have a fundamental understanding of what the service does. Use the service FAQ or \"Getting Started\" documentation as a guide for this description.</li> <li>Do not use acronyms before first introducing the full service/feature name.</li> </ul> </li> <li><code>@example</code> to be provided showing the proper use or multiple example uses in YAML format.</li> <li>Use <code>@remarks</code> when adding notes/comments about the class or property value. Some things to keep top of mind when writing notes:<ul> <li>What happens if a user changes this property after initial deployment?</li> <li>Are there any constraints for this property value (i.e. min/max numbers, unsupported characters, etc).</li> <li>Put yourself in the shoes of a new LZA customer. Is there anything you would want to know as someone unfamiliar with the solution? For example, I need to reference the <code>name</code> property of a different config item. Where do a find that config?</li> <li>Warn users of destructive actions appropriately in the notes. The following boilerplate serves as an example:<ul> <li>CAUTION: changing this value after initial deployment will cause <code>&lt;resource type&gt;</code> to be recreated. Please be aware that any downstream dependencies may cause this property update to fail.</li> </ul> </li> </ul> </li> </ul> </li> </ul> <p>The following example contains all of the necessary content as an example for the top-level class description for IpamPoolConfig within NetworkConfig:</p> <pre><code>/**\n * *{@link NetworkConfig} / {@link CentralNetworkServicesConfig} / {@link IpamConfig} / {@link IpamPoolConfig}*\n *\n * {@link https://docs.aws.amazon.com/vpc/latest/ipam/how-it-works-ipam.html | VPC IPAM pool} configuration.\n * Use this configuration to define custom IPAM pools for your VPCs. A pool is a collection of contiguous\n * IP address ranges. IPAM pools enable you to organize your IP addresses according to your routing and security needs.\n *\n * @example\n * Base pool:\n * ```\n * - name: accelerator-base-pool\n *   description: Base IPAM pool\n *   provisionedCidrs:\n *     - 10.0.0.0/16\n *   tags: []\n * ```\n * Regional pool:\n * ```\n * - name: accelerator-regional-pool\n *   description: Regional pool for us-east-1\n *   locale: us-east-1\n *   provisionedCidrs:\n *     - 10.0.0.0/24\n *   sourceIpamPool: accelerator-base-pool\n * ```\n */\n</code></pre> <p>The following example shows the property definitions under the IpamPoolConfig class:</p> <pre><code>export class IpamPoolConfig implements t.TypeOf&lt;typeof NetworkConfigTypes.ipamPoolConfig&gt; {\n  /**\n   * The address family for the IPAM pool.\n   *\n   * @remarks\n   * The default value is `ipv4`.\n   *\n   * @see {@link NetworkConfigTypes.ipVersionEnum}\n   */\n  readonly addressFamily: t.TypeOf&lt;typeof NetworkConfigTypes.ipVersionEnum&gt; | undefined = 'ipv4';\n  /**\n   * A friendly name for the IPAM pool.\n   *\n   * @remarks\n   * **CAUTION**: Changing this value after initial deployment\n   * will cause the pool to be recreated.\n   * Please be aware that any downstream dependencies may cause\n   * this property update to fail.\n   */\n  readonly name: string = '';\n  /**\n   * (OPTIONAL) The friendly name of the IPAM scope to assign the IPAM pool to.\n   *\n   * @remarks\n   * Note: This is the logical `name` property of the scope as defined in network-config.yaml.\n   * Leave this property undefined to create the pool in the default private scope.\n   *\n   * @see {@link IpamScopeConfig}\n   */\n  readonly scope: string | undefined = undefined;\n  /**\n   * (OPTIONAL) The default netmask length of IPAM allocations for this pool.\n   *\n   * @remarks\n   * Setting this property will enforce a default netmask length for all IPAM allocations in this pool.\n   */\n  readonly allocationDefaultNetmaskLength: number | undefined = undefined;\n  /**\n   * (OPTIONAL) The maximum netmask length of IPAM allocations for this pool.\n   *\n   * @remarks\n   * Setting this property will enforce a maximum netmask length for all IPAM allocations in this pool.\n   * This value must be larger than the `allocationMinNetmaskLength` value.\n   */\n  readonly allocationMaxNetmaskLength: number | undefined = undefined;\n  /**\n   * (OPTIONAL) The minimum netmask length of IPAM allocations for this pool.\n   *\n   * @remarks\n   * Setting this property will enforce a minimum netmask length for all IPAM allocations in this pool.\n   * This value must be less than the `allocationMaxNetmaskLength` value.\n   */\n  readonly allocationMinNetmaskLength: number | undefined = undefined;\n  /**\n   * (OPTIONAL) An array of tags that are required for resources that use CIDRs from this IPAM pool.\n   *\n   * @remarks\n   * Resources that do not have these tags will not be allowed to allocate space from the pool.\n   */\n  readonly allocationResourceTags: t.Tag[] | undefined = undefined;\n  /**\n   * (OPTIONAL) If set to `true`, IPAM will continuously look for resources within the CIDR range of this pool\n   * and automatically import them as allocations into your IPAM.\n   */\n  readonly autoImport: boolean | undefined = undefined;\n  /**\n   * (OPTIONAL) A description for the IPAM pool.\n   */\n  readonly description: string | undefined = undefined;\n  /**\n   * (OPTIONAL) The AWS Region where you want to make an IPAM pool available for allocations.\n   *\n   * @remarks\n   * **CAUTION**: Changing this value after initial deployment\n   * will cause the pool to be recreated.\n   * Please be aware that any downstream dependencies may cause\n   * this property update to fail.\n   *\n   * Only resources in the same Region as the locale of the pool can get IP address allocations from the pool.\n   * A base (top-level) pool does not require a locale.\n   * A regional pool requires a locale.\n   */\n  readonly locale: t.Region | undefined = undefined;\n  /**\n   * An array of CIDR ranges to provision for the IPAM pool.\n   *\n   * @remarks\n   * **CAUTION**: Changing or removing an existing provisioned CIDR range after initial deployment may impact downstream VPC allocations.\n   * Appending additional provisioned CIDR ranges does not impact downstream resources.\n   *\n   * Use CIDR notation, i.e. 10.0.0.0/16.\n   * If defining a regional pool, the provisioned CIDRs must be a subset of the source IPAM pool's CIDR ranges.\n   */\n  readonly provisionedCidrs: string[] | undefined = undefined;\n  /**\n   * (OPTIONAL) Determines if a pool is publicly advertisable.\n   *\n   * @remarks\n   * This option is not available for pools with AddressFamily set to ipv4.\n   */\n  readonly publiclyAdvertisable: boolean | undefined = undefined;\n  /**\n   * (OPTIONAL) Resource Access Manager (RAM) share targets.\n   *\n   * @remarks\n   * Targets can be account names and/or organizational units.\n   * Pools must be shared to any accounts/OUs that require IPAM allocations.\n   * The pool does not need to be shared with the delegated administrator account.\n   *\n   * @see {@link ShareTargets}\n   */\n  readonly shareTargets: t.ShareTargets = new t.ShareTargets();\n  /**\n   * (OPTIONAL) The friendly name of the source IPAM pool to create this IPAM pool from.\n   *\n   * @remarks\n   * Only define this value when creating regional IPAM pools. Leave undefined for top-level pools.\n   */\n  readonly sourceIpamPool: string | undefined = undefined;\n  /**\n   * (OPTIONAL) An array of tag objects for the IPAM pool.\n   */\n  readonly tags: t.Tag[] | undefined = undefined;\n}\n</code></pre>"},{"location":"developer-guide/doc-guidelines/#github-pages","title":"GitHub Pages","text":"<p>LZA uses the MkDocs static site generator to build this GitHub Pages website. MkDocs takes markdown files and a YAML manifest in order to generate the necessary HTML for GitHub Pages.</p>"},{"location":"developer-guide/doc-guidelines/#helpful-tips_1","title":"Helpful Tips","text":"<ul> <li>The YAML manifest and raw markdown files are located in the <code>./source/mkdocs</code> directory of the solution source code repository.</li> <li>It is recommended to read through Getting Started with MkDocs to understand how to install and interact with the mkdocs CLI and YAML manifest.</li> <li>If you install the development dependencies on your workstation, you can run <code>mkdocs serve</code> to easily test your changes on a local web server.</li> </ul>"},{"location":"developer-guide/doc-guidelines/#development-dependencies","title":"Development Dependencies","text":"<p>The following additional development dependencies are required for testing documentation updates locally:</p> <ul> <li>Python &gt;= 3.11</li> <li>mkdocs &gt;= 1.5.3</li> <li>mkdocs-material &gt;= 9.5.3</li> </ul> <p>Info</p> <p>The package versions the solution is using to build the site are pinned in <code>./.github/workflows/docs.yml</code>. It is recommended to use the same versions to ensure consistency between your local site and GitHub Pages. </p>"},{"location":"developer-guide/doc-guidelines/#style-recommendations","title":"Style Recommendations","text":"<ul> <li>If creating a new top-level section for the website navbar, include an <code>index.md</code> page with a high-level description, subpages included in the section, and any other public reference material that may be relevant. For an example, see the User Guide. </li> <li>If creating a new subpage for a top-level section, make sure to update the MkDocs YAML manifest with the new page and add it to the list of subpages in that section's <code>index.md</code>.</li> <li>MkDocs uses standard markdown formatting. The Markdown Cheat Sheet is a good reference for formatting your markdown files.</li> <li>There are some non-native markdown extensions enabled by the Material theme, namely Admonitions and Footnotes. These features can be very useful for adding additional context and important notes to your documentation. See the Material for MkDocs Reference for all supported extensions. </li> </ul> <p>Info</p> <p>Not all markdown extensions are configured at this time, so you may need to add them to the configuration as they are needed.</p>"},{"location":"developer-guide/features/","title":"Feature Development","text":"<p>This section outlines guidance for developing features for Landing Zone Accelerator.</p>"},{"location":"developer-guide/features/#deploying-resource-dependencies-via-landing-zone-accelerator","title":"Deploying resource dependencies via Landing Zone Accelerator","text":"<p>When developing features for the accelerator, you may encounter situations where resources in one stack may need to reference resources created in prior stages of the pipeline. This is especially true if you need to ensure a certain resource is available in all accounts and regions managed by the solution before that resource is consumed by subsequent stacks (e.g. cross-account IAM roles, S3 buckets). <code>DependenciesStack</code> has been introduced to the pipeline for this use case. Deployed during the <code>Key</code> stage of the pipeline, any resources added to this stack may be utilized globally by the accelerator in subsequent stacks. This stack may be considered a means to \"bootstrap\" the environment with accelerator-specific (non-CDK) dependencies.</p> <p>The <code>DependenciesStack</code> may be found in <code>./source/packages/@aws-accelerator/accelerator/stacks/dependencies-stack.ts</code>.</p>"},{"location":"developer-guide/features/#resource-availability-by-region-or-partition","title":"Resource availability by region or partition","text":"<p>The LZA is built to manage the deployment of AWS resources across all available partitions and regions. As new services and features are released, there is often a lack of feature parity across these regions or partitions. The LZA team has made the decision not to create guardrails blocking customers from deploying elective resources to regions or partitions where they are unavailable. This practice requires additional research during the initial implementation, as well as follow-up work to remove the guardrail when the feature becomes available.</p> <p>When designing a feature not available in all regions/partitions, do not create checks or validations to block deployment or throw an error based on the environment. Customers are ultimately responsible for determining the services and features available in the AWS regions and partitions they deploy to. </p>"},{"location":"developer-guide/features/#adding-validation","title":"Adding Validation","text":"<p>The LZA runs a set of validation functions against the provided configuration repository in order to alert customers of syntactical errors. These validations save customers significant time as this can reduce the time for the pipeline to fail in the event of a misconfiguration. This occurs during the <code>Build</code> stage of the pipeline, where the CodeBuild project runs the same <code>config-validator.ts</code> script referenced in Configuration Validation. This script orchestrates a collection of configuration-file-specific validation classes defined in the <code>./source/packages/@aws-accelerator/accelerator/config/validator</code> directory.</p> <p>When developing a feature that modifies or creates new possible configurations, please ensure you create new validation functions in the appropriate validator class. Examples of common validations include: - Validate account and organizational unit names referenced in <code>deploymentTargets</code> are valid <pre><code>  private validateSsmDocumentDeploymentTargetOUs(\n    values: t.TypeOf&lt;typeof SecurityConfigTypes.securityConfig&gt;,\n    ouIdNames: string[],\n    errors: string[],\n  ) {\n    for (const documentSet of values.centralSecurityServices.ssmAutomation.documentSets ?? []) {\n      for (const ou of documentSet.shareTargets.organizationalUnits ?? []) {\n        if (ouIdNames.indexOf(ou) === -1) {\n          errors.push(`Deployment target OU ${ou} for SSM documents does not exists in organization-config.yaml file.`);\n        }\n      }\n    }\n  }\n</code></pre> - Validate referenced files exist <pre><code>  private validateTaggingPolicyFile(configDir: string, values: OrganizationConfig, errors: string[]) {\n    for (const taggingPolicy of values.taggingPolicies ?? []) {\n      if (!fs.existsSync(path.join(configDir, taggingPolicy.policy))) {\n        errors.push(`Invalid policy file ${taggingPolicy.policy} for tagging policy ${taggingPolicy.name} !!!`);\n      }\n    }\n  }\n</code></pre> - Validate AWS service-specific properties <pre><code>  private validateCloudTrailSettings(values: GlobalConfig, errors: string[]) {\n    if (\n      values.logging.cloudtrail.organizationTrail &amp;&amp;\n      values.logging.cloudtrail.organizationTrailSettings?.multiRegionTrail &amp;&amp;\n      !values.logging.cloudtrail.organizationTrailSettings.globalServiceEvents\n    ) {\n      errors.push(\n        `The organization CloudTrail setting multiRegionTrail is enabled, the globalServiceEvents must be enabled as well`,\n      );\n    }\n    for (const accountTrail of values.logging.cloudtrail.accountTrails ?? []) {\n      if (accountTrail.settings.multiRegionTrail &amp;&amp; !accountTrail.settings.globalServiceEvents) {\n        errors.push(\n          `The account CloudTrail with the name ${accountTrail.name} setting multiRegionTrail is enabled, the globalServiceEvents must be enabled as well`,\n        );\n      }\n    }\n  }\n</code></pre> - Validate resource names for uniqueness <pre><code>  private validateStackNameForUniqueness(\n    values: t.TypeOf&lt;typeof CustomizationsConfigTypes.customizationsConfig&gt;,\n    errors: string[],\n  ) {\n    const stackNames = [...(values.customizations?.cloudFormationStacks ?? [])].map(item =&gt; item.name);\n    const stackSetNames = [...(values.customizations?.cloudFormationStackSets ?? [])].map(item =&gt; item.name);\n\n    if (new Set(stackNames).size !== stackNames.length) {\n      errors.push(`Duplicate custom stack names defined [${stackNames}].`);\n    }\n\n    if (new Set(stackSetNames).size !== stackSetNames.length) {\n      errors.push(`Duplicate custom stackset names defined [${stackSetNames}].`);\n    }\n  }\n</code></pre></p>"},{"location":"developer-guide/features/#snapshot-testing","title":"Snapshot Testing","text":"<p>The LZA currently utilizes snapshot testing to identify and mitigate unintended consequences of new features. Snapshot testing occurs at the stack level, the config level, and the construct level. </p> <p>To update snapshot tests, run the following command from the <code>source</code> directory: <pre><code>yarn update-snapshots\n</code></pre> To execute all tests, change directory to <code>source</code> and run <pre><code>yarn test\n</code></pre></p>"},{"location":"developer-guide/features/#accelerator-test-updates","title":"Accelerator Test Updates","text":"<p>When developing a new feature, please enable or create the new resource by updating the all-enabled and snapshot-only  configuration directory. After updating the configuration, run <code>yarn test -u</code> from the <code>accelerator</code> directory. Currently snapshot-only directory files are used for snapshot testing and all-enabled directory files are used for functional test. Gradually snapshot-only directory configuration files will be migrated to all-enabled directory.</p> <p>all-enabled directory configuration files are validated through pre-commit hook.  To manually validate all-enabled directory config files, change directory to <code>source</code> and run  <pre><code>yarn validate-config packages/@aws-accelerator/accelerator/test/configs/all-enabled/\n</code></pre></p>"},{"location":"developer-guide/features/#config-test-updates","title":"Config Test Updates","text":"<p>If you create a new config type, please update the appropriate configuration test within <code>config/test</code>. After making this update, run <code>yarn test -u</code> from the <code>config</code> directory.</p>"},{"location":"developer-guide/features/#construct-test-updates","title":"Construct Test Updates","text":"<p>If you create a new construct, please create a new unit test for the construct within <code>constructs/test</code>. Similar to the folder structure within <code>constructs/lib</code>, these test files are separated by AWS service. After creating a new unit test, run <code>yarn test -u</code> from the <code>constructs</code> directory.</p>"},{"location":"developer-guide/json-schema/","title":"Using JSON Schema","text":"<p>Landing Zone Accelerator on AWS fully supports JSON Schema, empowering you with enhanced configuration validation and auto-completion directly in your IDE.</p>"},{"location":"developer-guide/json-schema/#validation","title":"Validation","text":"<p>Configuration files are validated in real-time as you type, reducing syntax errors and improving your feedback loop. If any of your configuration files contain an error that does not align with the LZA schema, you will know immediately before pushing your config to CodeCommit.</p>"},{"location":"developer-guide/json-schema/#auto-completion","title":"Auto-Completion","text":"<p>As you type, you will receive suggestions for configurations straight from the schema, making it easier and faster to edit LZA configuration files.</p> <p></p>"},{"location":"developer-guide/json-schema/#discoverability","title":"Discoverability","text":"<p>By exploring each LZA configuration file using the schema, you will be able to discover what options are available to you without ever leaving the IDE. For example - you can highlight any of the LZA configuration entries to view a description of it. Another example, trigger a suggest (Ctrl/Cmd+Space in VSCode) anywhere in the LZA configuration code to show available options to you.</p> <p></p>"},{"location":"developer-guide/json-schema/#getting-started","title":"Getting Started","text":"<p>This feature is designed to enhance the experience of working with the LZA configuration files and is immediately available. To take advantage of this, open up any of the LZA configuration files in an editor that supports JSON Schema. A few popular IDEs are listed below that have been validated:</p> <ul> <li>VSCode: requires the YAML extension: <code>code --install-extension redhat.vscode-yaml</code></li> <li>IntelliJ</li> </ul>"},{"location":"developer-guide/package-dependencies.generated/","title":"Package Dependencies","text":"<p>This section outlines the package dependencies within the LZA monorepo structure.</p>"},{"location":"developer-guide/package-dependencies.generated/#dependencies","title":"Dependencies","text":"<p>This tabulated information presents a detailed overview of all packages and their respective dependencies contained within the LZA monorepo framework.</p> PackageDependsOn Packages                            @aws-accelerator/accelerator                        @aws-accelerator/config @aws-accelerator/constructs @aws-accelerator/utils @aws-cdk-extensions/cdk-plugin-assume-role                            @aws-accelerator/constructs                        @aws-accelerator/config @aws-accelerator/utils                            @aws-accelerator/installer                        @aws-accelerator/accelerator @aws-cdk-extensions/cdk-extensions                            @aws-accelerator/lza-modules                        @aws-accelerator/config @aws-accelerator/utils                            @aws-accelerator/modules                        @aws-accelerator/config @aws-accelerator/utils                            @aws-accelerator/tester-lambdas                        @aws-accelerator/utils                            @aws-accelerator/tools                        @aws-accelerator/config @aws-accelerator/utils"},{"location":"developer-guide/package-dependencies.generated/#diagrams","title":"Diagrams","text":"<p>This section presents visual dependency mappings for packages that rely on other package(s) within the LZA monorepo structure.</p>"},{"location":"developer-guide/package-dependencies.generated/#aws-acceleratoraccelerator","title":"@aws-accelerator/accelerator","text":""},{"location":"developer-guide/package-dependencies.generated/#aws-acceleratorconstructs","title":"@aws-accelerator/constructs","text":""},{"location":"developer-guide/package-dependencies.generated/#aws-acceleratorinstaller","title":"@aws-accelerator/installer","text":""},{"location":"developer-guide/package-dependencies.generated/#aws-acceleratorlza-modules","title":"@aws-accelerator/lza-modules","text":""},{"location":"developer-guide/package-dependencies.generated/#aws-acceleratormodules","title":"@aws-accelerator/modules","text":""},{"location":"developer-guide/package-dependencies.generated/#aws-acceleratortester-lambdas","title":"@aws-accelerator/tester-lambdas","text":""},{"location":"developer-guide/package-dependencies.generated/#aws-acceleratortools","title":"@aws-accelerator/tools","text":""},{"location":"developer-guide/scripts/","title":"Core Command Line Interface (CLI) and Package Scripts","text":""},{"location":"developer-guide/scripts/#core-cli","title":"Core CLI","text":"<p>The Landing Zone Accelerator CDK application is invoked using a custom-built implementation of the CDK toolkit. The implementation has additional context option flags that can be used to target pipeline stages, specific accounts, and other attributes. Users can invoke the accelerator pipeline stages locally using this CLI, or programmatically in sequence by running AWSAccelerator-Pipeline. Invoking stages locally can speed up development cycles by enabling developers to focus on deployment of a single stage, or help more advanced users of the solution to quickly deploy targeted updates to an environment. </p> Before using the CLI <ol> <li>Ensure you have credentials for your accelerator management account set as environment variables or as an AWS CLI profile</li> <li>Change your local working directory (starting from the root directory of the project): <code>cd source/packages/\\@aws-accelerator/accelerator</code></li> </ol> Warning <p>Local use of the CLI should be used with caution. Configuration changes deployed via this method do not have an approval/diff gate by default. You can add an approval gate to deploy operations by appending the following option: <code>--require-approval any-change</code></p> <p>Example usage of the CLI: <pre><code>yarn run ts-node --transpile-only cdk.ts &lt;toolkit_command&gt; &lt;options&gt;\n</code></pre></p> <p>Native toolkit commands and options can be found in the AWS CDK Toolkit reference.</p> <p>Accelerator-specific context options:</p> <p><code>--account</code>        The AWS account ID to deploy the pipeline stage</p> <p><code>--config-dir</code>     The local directory where the accelerator configuration files are stored</p> <p><code>--partition</code>      The AWS partition to deploy the pipeline stage</p> <p><code>--region</code>         The AWS region to deploy the pipeline stage</p> <p><code>--stage</code>          The pipeline stage to deploy. Stage names can be found in the accelerator-stage.ts file.</p> Example synth command <pre><code>yarn run ts-node --transpile-only cdk.ts synth --stage network-vpc --require-approval any-change --config-dir /path/to/aws-accelerator-config/ --partition aws --region &lt;region&gt; --account &lt;REDACTED&gt;\n</code></pre> Example deploy command <pre><code>yarn run ts-node --transpile-only cdk.ts deploy --stage network-vpc --require-approval any-change --config-dir /path/to/aws-accelerator-config/ --partition aws --region &lt;region&gt; --account &lt;REDACTED&gt; --app cdk.out\n</code></pre>"},{"location":"developer-guide/scripts/#configuration-validator","title":"Configuration Validator","text":"<p>The accelerator has a helper script that runs config validation on a provided configuration directory. This script is run during the Build stage of the pipeline, but may also be run locally if the development toolchain is installed.</p> <p>Example usage of the CLI: <pre><code>yarn run ts-node --transpile-only config-validator.ts /path/to/aws-accelerator-config/\n</code></pre></p> Alternative syntax <pre><code>yarn validate-config /path/to/aws-accelerator-config/\n</code></pre>"},{"location":"developer-guide/scripts/#helper-scripts","title":"Helper Scripts","text":"<p>Several helper scripts are built into the project that support performing common actions across the monorepo. These scripts are contained within ./source/package.json.</p> <p>Note</p> <p>When scripts are run from the ./source directory, the scope is the entire monorepo. They can also be run for each package under their respective directories.</p> <ul> <li><code>yarn build</code> - compiles TypeScript code into JavaScript</li> <li><code>yarn cleanup</code> - removes compiled TypeScript code, Node modules, and other build artifacts from the local repo</li> <li><code>yarn cleanup:tsc</code> - removes only compiled TypeScript code</li> <li><code>yarn docs</code> - generate TypeDocs</li> <li><code>yarn generate-all-docs</code> - generate TypeDocs for all versions of the solution (only available in ./source directory)</li> <li><code>yarn install</code> - install package dependencies</li> <li><code>yarn lint</code> - run ESLint</li> <li><code>yarn prettier</code> - run Prettier</li> <li><code>yarn test</code> - run unit tests</li> <li><code>yarn test:clean</code> - remove test reports</li> <li><code>yarn validate-config /path/to/aws-accelerator-config</code> - shorthand for the configuration validator script documented in the previous section</li> <li><code>yarn update-snapshots</code> - verify current release version and automatically update snapshots</li> </ul>"},{"location":"developer-guide/module-development/","title":"LZA Module Development Guide","text":"<p>This section contains guidance about developing and integrating LZA modules.</p>"},{"location":"developer-guide/module-development/#overview","title":"Overview","text":"<p>Landing Zone Accelerator (LZA) modules are standalone, SDK-based code units that operate independently of the main LZA configuration files. These modules can be seamlessly integrated into the LZA framework, enhancing its capabilities and allowing for customized implementations.</p> <p>Through the use of these modules, LZA capabilities can be implemented and run separately from the primary LZA deployment pipeline. This modular approach allows for greater flexibility and independent execution of specific LZA functions outside the constraints of the main pipeline process.</p> <p>Subpages</p> <ul> <li>Project Structure</li> <li>Module Naming and Scope</li> <li>Module Development Guidelines</li> <li>Integration Guide: Using LZA Modules</li> </ul>"},{"location":"developer-guide/module-development/integration-guide/","title":"Integration Guide: Using LZA Modules","text":""},{"location":"developer-guide/module-development/integration-guide/#overview","title":"Overview","text":"<p>This guide demonstrates how to integrate and utilize LZA modules in LZA accelerator and other projects. Each module provides specific AWS service management capabilities through well-defined interfaces.</p>"},{"location":"developer-guide/module-development/integration-guide/#basic-implementation","title":"Basic Implementation","text":""},{"location":"developer-guide/module-development/integration-guide/#1-module-import-and-basic-usage","title":"1. Module Import and Basic Usage","text":"<pre><code>import { \n  setupControlTowerLandingZone,\n  ISetupLandingZoneHandlerParameter \n} from '@aws-lza';\n\nasync function deployControlTower() {\n  const params: ISetupLandingZoneHandlerParameter = {\n    dryRun: false,\n    partition: 'aws',\n    homeRegion: 'us-east-1',\n    configuration: {\n      version: '3.3',\n      enabledRegions: ['us-east-1', 'us-west-2'],\n      logging: {\n        organizationTrail: true,\n        retention: {\n          loggingBucket: 365,\n          accessLoggingBucket: 365\n        }\n      },\n      security: {\n        enableIdentityCenterAccess: true\n      },\n      sharedAccounts: {\n        management: {\n          name: 'Management',\n          email: 'management@example.com'\n        },\n        logging: {\n          name: 'LogArchive',\n          email: 'log-archive@example.com'\n        },\n        audit: {\n          name: 'Audit',\n          email: 'audit@example.com'\n        }\n      }\n    }\n  };\n\n  try {\n    const result = await setupControlTowerLandingZone(params);\n    console.log('Status:', result);\n  } catch (error) {\n    console.error('Failure:', error.message);\n  }\n}\n</code></pre>"},{"location":"developer-guide/module-development/integration-guide/#2-implementing-error-handling","title":"2. Implementing Error Handling","text":"<pre><code>async function safeModuleExecution() {\n  try {\n    return await setupControlTowerLandingZone(params);\n  } catch (err) {\n    console.error(err.message);\n    return err;\n  }\n}\n\n// Using IIFE (Immediately Invoked Function Expression)\n(async () =&gt; {\n  try {\n    const result = await safeModuleExecution();\n    // Handle result\n  } catch (err) {\n    // Handle error\n  }\n})();\n</code></pre>"},{"location":"developer-guide/module-development/integration-guide/#implementation-best-practices","title":"Implementation Best Practices","text":""},{"location":"developer-guide/module-development/integration-guide/#1-configuration-management","title":"1. Configuration Management","text":"<ul> <li>Store configurations in separate files</li> <li>Use environment variables for sensitive data</li> <li>Validate configurations before passing to modules</li> </ul> <pre><code>// config-validator.ts\nfunction validateConfig(config: ISetupLandingZoneHandlerParameter): boolean {\n  // Add validation logic\n  return true;\n}\n\n// usage.ts\nif (!validateConfig(params)) {\n  throw new Error('Invalid configuration');\n}\n</code></pre>"},{"location":"developer-guide/module-development/integration-guide/#2-error-handling-patterns","title":"2. Error Handling Patterns","text":"<pre><code>try {\n  await setupControlTowerLandingZone(params);\n} catch (error) {\n  if (error instanceof ValidationError) {\n    // Handle validation errors\n  } else if (error instanceof AWSError) {\n    // Handle AWS-specific errors\n  } else {\n    // Handle other errors\n  }\n}\n</code></pre>"},{"location":"developer-guide/module-development/integration-guide/#3-asynchronous-operations","title":"3. Asynchronous Operations","text":"<ul> <li>Always use async/await for module operations</li> <li>Implement proper promise handling</li> <li>Handle promise rejections</li> </ul>"},{"location":"developer-guide/module-development/integration-guide/#testing-and-validation","title":"Testing and Validation","text":""},{"location":"developer-guide/module-development/integration-guide/#integration-testing-example","title":"Integration Testing Example","text":"<pre><code>describe('SetupLandingZoneModule Integration Test', () =&gt; {\n  it('should successfully deploy Control Tower Landing Zone', async () =&gt; {\n    const params = {\n      // Test configuration\n    };\n\n    const result = await setupControlTowerLandingZone(params);\n    expect(result).toBeDefined();\n  });\n\n  it('should handle invalid configurations', async () =&gt; {\n    const invalidParams = {\n      // Invalid configuration\n    };\n\n    await expect(setupControlTowerLandingZone(invalidParams))\n      .rejects\n      .toThrow();\n  });\n});\n</code></pre>"},{"location":"developer-guide/module-development/integration-guide/#troubleshooting-guide","title":"Troubleshooting Guide","text":""},{"location":"developer-guide/module-development/integration-guide/#1-configuration-issues","title":"1. Configuration Issues","text":"<ul> <li>Verify all required parameters are provided</li> <li>Check parameter types and formats</li> <li>Ensure AWS credentials are properly configured</li> </ul>"},{"location":"developer-guide/module-development/integration-guide/#2-aws-service-related-issues","title":"2. AWS Service Related Issues","text":"<ul> <li>Check AWS service quotas and limits</li> <li>Verify IAM permissions</li> <li>Review AWS service health dashboard</li> </ul>"},{"location":"developer-guide/module-development/integration-guide/#3-module-operation-issues","title":"3. Module Operation Issues","text":"<ul> <li>Check module version compatibility</li> <li>Verify input parameter format</li> <li>Review module documentation for updates</li> </ul> <p>\u2190 Back to Module Development Guide</p>"},{"location":"developer-guide/module-development/module-development-guidelines/","title":"Module Development Guidelines","text":""},{"location":"developer-guide/module-development/module-development-guidelines/#1-prerequisites","title":"1. Prerequisites","text":"<ul> <li>Node.js (Latest LTS version)</li> <li>AWS CDK</li> <li>TypeScript</li> <li>AWS SDK for JavaScript/TypeScript</li> </ul>"},{"location":"developer-guide/module-development/module-development-guidelines/#2-basic-module-requirements","title":"2. Basic Module Requirements","text":"<ul> <li>Each module must be self-contained</li> <li>Implement proper error handling</li> <li>Include comprehensive testing</li> <li>Follow AWS SDK best practices</li> <li>Use strong typing with TypeScript</li> <li>Must implement the corresponding interface contract</li> </ul>"},{"location":"developer-guide/module-development/module-development-guidelines/#3-core-components","title":"3. Core Components","text":""},{"location":"developer-guide/module-development/module-development-guidelines/#module-implementation","title":"Module Implementation","text":"<ul> <li>All module code resides in <code>source/packages/@aws-lza/lib</code></li> <li>Each module should have its dedicated folder (e.g., <code>control-tower</code>, <code>macie</code>)</li> <li>Must have an <code>index.ts</code> file implementing the module interface</li> </ul>"},{"location":"developer-guide/module-development/module-development-guidelines/#common-resources","title":"Common Resources","text":"<ul> <li>Shared functions and constants are stored in <code>source/packages/@aws-lza/common</code></li> <li>Reusable components should be properly documented and maintained</li> </ul>"},{"location":"developer-guide/module-development/module-development-guidelines/#module-executors","title":"Module Executors","text":"<ul> <li>Entry points for each module are in <code>source/packages/@aws-lza/executors</code></li> <li>Example: <code>accelerator-control-tower.ts</code> serves as the entry point for Control Tower operations</li> </ul> <pre><code>export async function setupControlTowerLandingZone(input: ISetupLandingZoneHandlerParameter): Promise&lt;string&gt; {\n  try {\n    return await new SetupLandingZoneModule().handler(input);\n  } catch (e: unknown) {\n    console.error(e);\n    throw new Error(`${e}`);\n  }\n}\n</code></pre>"},{"location":"developer-guide/module-development/module-development-guidelines/#4-testing-requirements","title":"4. Testing Requirements","text":""},{"location":"developer-guide/module-development/module-development-guidelines/#unit-testing","title":"Unit Testing","text":"<ul> <li>Implementation using Jest testing framework</li> <li>100% line coverage requirement</li> <li>Test files named as <code>&lt;module-name&gt;.test.unit.ts</code></li> <li>Located in <code>source/packages/@aws-lza/test/lib/&lt;module-name&gt;</code></li> <li>Must include interface contract compliance tests</li> </ul>"},{"location":"developer-guide/module-development/module-development-guidelines/#interface-contract-compliance-testing","title":"Interface Contract Compliance Testing","text":"<p>Contract testing verifies that a module correctly implements its interface requirements. For example:</p> <pre><code>// interfaces/control-tower/setup-landing-zone.ts\nexport interface SetupLandingZoneModule {\n  handler(props: ISetupLandingZoneHandlerParameter): Promise&lt;string&gt;;\n}\n\n// setup-landing-zone.test.unit.ts\ndescribe('SetupLandingZoneModule Contract Compliance', () =&gt; {\n  const input: ISetupLandingZoneHandlerParameter = {\n    ...MOCK_CONSTANTS.runnerParameters,\n    configuration: MOCK_CONSTANTS.setupControlTowerLandingZoneConfiguration,\n  };\n  let module: SetupLandingZoneModule;\n\n  beforeEach(() =&gt; {\n    module = new SetupLandingZoneModule();\n    // Mock the handler implementation\n    jest.spyOn(module, 'handler').mockImplementation(async () =&gt; 'mocked-response');\n  });\n\n  test('should implement all interface methods', () =&gt; {\n    expect(module.handler).toBeDefined();\n    expect(typeof module.handler).toBe('function');\n  });\n\n  test('should maintain correct method signatures', async () =&gt; {\n    const result = module.handler(input);\n    // Verify that handler returns a Promise\n    expect(result).toBeInstanceOf(Promise);\n    // Verify that the resolved value is a string\n    await expect(result).resolves.toBe('mocked-response');\n    await expect(result).resolves.toEqual(expect.any(String));\n  });\n\n  test('should handle invalid inputs according to contract', async () =&gt; {\n    // Reset mock to test error handling\n    jest.spyOn(module, 'handler').mockRejectedValue(new Error('Invalid input parameters'));\n\n    await expect(module.handler({} as ISetupLandingZoneHandlerParameter)).rejects.toThrow('Invalid input parameters');\n  });\n\n  test('should fulfill interface behavioral requirements', async () =&gt; {\n    const result = await module.handler(input);\n    expect(typeof result).toBe('string');\n    expect(result).toBeTruthy();\n  });\n\n  afterEach(() =&gt; {\n    jest.restoreAllMocks();\n  });\n});\n</code></pre>"},{"location":"developer-guide/module-development/module-development-guidelines/#integration-testing","title":"Integration Testing","text":"<ul> <li>Mandatory for each module</li> <li>Tests actual AWS account deployments</li> <li>Verifies expected outcomes</li> <li>Test files named as <code>&lt;module-name&gt;.test.integration.ts</code></li> <li>Located in <code>source/packages/@aws-lza/test/&lt;module-name&gt;</code></li> </ul>"},{"location":"developer-guide/module-development/module-development-guidelines/#test-utilities","title":"Test Utilities","text":"<ul> <li>Common test utilities stored in <code>source/packages/@aws-lza/test/utils</code></li> <li>Includes mock constants and shared test functions</li> </ul>"},{"location":"developer-guide/module-development/module-development-guidelines/#5-module-development-best-practices","title":"5. Module Development Best Practices","text":""},{"location":"developer-guide/module-development/module-development-guidelines/#code-organization","title":"Code Organization","text":"<pre><code>// Example module structure\nexport class ModuleImplementation implements IModuleInterface {\n\n    public async handler(props: &lt;ModuleProps&gt;): Promise&lt;string&gt; {\n        // Implementation logic\n    }\n}\n</code></pre>"},{"location":"developer-guide/module-development/module-development-guidelines/#6-interface-implementation-requirements","title":"6. Interface Implementation Requirements","text":"<ol> <li> <p>Interface Location</p> <ul> <li>All interfaces must be in <code>source/packages/@aws-lza/interfaces/</code></li> <li>Named according to module name (e.g., <code>macie.ts</code>, <code>control-tower.ts</code>)</li> </ul> </li> <li> <p>Implementation Requirements</p> <ul> <li>Must implement all methods defined in the interface</li> <li>Located in module's <code>index.ts</code></li> <li>Strict type compliance</li> <li>Complete error handling</li> </ul> </li> <li> <p>Contract Validation</p> <ul> <li>All interface methods must be implemented</li> <li>Type safety must be maintained</li> <li>No additional public methods beyond interface</li> </ul> </li> </ol>"},{"location":"developer-guide/module-development/module-development-guidelines/#7-security-considerations","title":"7. Security Considerations","text":"<ul> <li>Follow AWS security best practices</li> <li>Implement proper IAM roles and policies</li> <li>Use secure communication channels</li> <li>Implement encryption where necessary</li> <li>Follow least privilege principle</li> </ul>"},{"location":"developer-guide/module-development/module-development-guidelines/#8-documentation-requirements","title":"8. Documentation Requirements","text":"<ul> <li>Document interface contracts</li> <li>Include method descriptions</li> <li>Document parameter types and returns</li> <li>Provide usage examples</li> </ul> <p>For more information refer doc-guidelines</p>"},{"location":"developer-guide/module-development/module-development-guidelines/#9-deployment-guidelines","title":"9. Deployment Guidelines","text":"<ul> <li>Ensure proper testing before deployment</li> <li>Implement rollback mechanisms</li> <li>Document deployment prerequisites</li> <li>Maintain version compatibility</li> </ul>"},{"location":"developer-guide/module-development/module-development-guidelines/#10-maintenance","title":"10. Maintenance","text":"<ul> <li>Regular updates and security patches</li> <li>Performance optimization</li> <li>Backward compatibility considerations</li> <li>Documentation updates</li> </ul> <p>\u2190 Back to Module Development Guide</p> <p>Integration Guide: Using LZA Modules \u2192</p>"},{"location":"developer-guide/module-development/module-naming-and-scope/","title":"Module Naming and Scope","text":""},{"location":"developer-guide/module-development/module-naming-and-scope/#module-definition","title":"Module Definition","text":"<p>In LZA, a module represents a dedicated codebase that manages a specific AWS service. Each module is responsible for handling configurations and operations for its designated AWS service only. For example:</p> <ul> <li><code>macie</code> module exclusively manages Amazon Macie configurations and operations</li> <li><code>control-tower</code> module handles AWS Control Tower management</li> <li><code>guardduty</code> module manages Amazon GuardDuty configurations</li> </ul>"},{"location":"developer-guide/module-development/module-naming-and-scope/#module-scope-guidelines","title":"Module Scope Guidelines","text":"<ol> <li> <p>Single Service Responsibility</p> <ul> <li>One module corresponds to one AWS service</li> <li>Each module encapsulates various operations related to its specific service</li> <li>No cross-service operations within a single module</li> </ul> </li> <li> <p>Naming Convention</p> <ul> <li>Module names should match their corresponding AWS service name</li> <li>Use lowercase, hyphen-separated names (e.g., <code>control-tower</code>, <code>security-hub</code>)</li> <li>Names should be immediately identifiable with their AWS service</li> </ul> </li> <li> <p>Service Boundaries</p> <ul> <li>Module should contain service-specific operations</li> <li>Configuration management for the service</li> <li>Service-specific API interactions</li> <li>Service-specific resource management</li> </ul> </li> </ol> <p>Example module structure: <pre><code>source/packages/@aws-lza/lib/\n\u251c\u2500\u2500 macie/                  # Amazon Macie operations\n\u251c\u2500\u2500 control-tower/          # AWS Control Tower operations\n\u251c\u2500\u2500 security-hub/           # AWS Security Hub operations\n\u2514\u2500\u2500 guard-duty/             # Amazon GuardDuty operations\n</code></pre></p>"},{"location":"developer-guide/module-development/module-naming-and-scope/#module-interface-and-implementation-contract","title":"Module Interface and Implementation Contract","text":"<p>Each module must have its interface definition in <code>interfaces/&lt;module-name&gt;.ts</code></p> <p>Each interface must extends <code>IModuleCommonParameter</code> interface</p> <p>Interfaces define the contract that the module must implement</p> <p>Example for Setup Control Tower Landing Zone interface: <pre><code>// interfaces/control-tower/setup-landing-zone.ts\nexport interface ISetupLandingZoneModule {\n  handler(props: ISetupLandingZoneHandlerParameter): Promise&lt;string&gt;;\n  // Other required methods and types\n}\n</code></pre></p> <p>Implementation must be in the module's index.ts: <pre><code>// lib/control-tower/setup-landing-zone/index.ts\nexport class SetupLandingZoneModule\n  implements ISetupLandingZoneModule {\n\n  public async handler(\n    props: ISetupLandingZoneHandlerParameter\n  ): Promise&lt;string&gt; {\n    // Implementation logic\n  }\n}\n</code></pre></p> <p>\u2190 Back to Module Development Guide</p> <p>Module Development Guidelines \u2192</p>"},{"location":"developer-guide/module-development/project-structure/","title":"Project Structure","text":"<p>The LZA modules are organized within the <code>aws-lza</code> project located in <code>source/packages/@aws-lza</code> with the following structure:</p> <pre><code>source/packages/@aws-lza/\n\u251c\u2500\u2500 lib/                            # Core module implementations\n\u2502   \u251c\u2500\u2500 control-tower/              # Control Tower specific operations\n\u2502   \u251c\u2500\u2500 macie/                      # Macie specific operations\n\u2502   \u2514\u2500\u2500 other-modules/              # Other module implementations\n\u251c\u2500\u2500 common/                         # Shared resources across modules\n\u251c\u2500\u2500 executors/                      # Entry point functions for modules\n\u251c\u2500\u2500 interfaces/                     # Module interface definitions\n\u251c\u2500\u2500 test/                           # Test implementations\n\u2502   \u251c\u2500\u2500 control-tower/              # Control Tower tests\n\u2502   \u251c\u2500\u2500 macie/                      # Macie tests\n\u2502   \u2514\u2500\u2500 utils/                      # Common test utilities\n\u2514\u2500\u2500 index.ts                        # Package exports\n</code></pre> <p>\u2190 Back to Module Development Guide</p> <p>Module Naming and Scope \u2192</p>"},{"location":"faq/","title":"Frequently Asked Questions (FAQ)","text":"<p>This section contains several categories of FAQs about the Landing Zone Accelerator solution. </p> <p>Subpages</p> <ul> <li>General</li> <li>Architecture</li> <li>AWS Control Tower and Customizations for Control Tower</li> <li>Customizations</li> <li>Operations</li> <li>Networking:<ul> <li>General</li> <li>Deep Packet Inspection</li> <li>AWS Direct Connect</li> <li>AWS Network Firewall</li> <li>AWS Gateway Load Balancer</li> </ul> </li> <li>Security</li> <li>Logging<ul> <li>Amazon CloudWatch</li> </ul> </li> </ul>"},{"location":"faq/architecture/","title":"Architecture FAQ","text":""},{"location":"faq/architecture/#what-does-the-solution-deploy","title":"What does the solution deploy?","text":"<p>The Landing Zone Accelerator is ultimately an orchestration engine that will deploy and configure the resources you specify in your configuration files. The Landing Zone Accelerator orchestration engine is deployed using AWS CloudFormation and utilizes AWS CodeCommit, AWS CodePipeline, and AWS CodeBuild to execute a Cloud Development Kit (CDK) application. This application is responsible for ingesting your configuration and deploying your resources through additional AWS CloudFormation stacks across your environment.</p> <p>For further details on the Landing Zone Accelerator orchestration engine, see Architecture overview and Architecture details in the implementation guide.</p>"},{"location":"faq/architecture/#what-does-the-aws-sample-configuration-deploy","title":"What does the AWS sample configuration deploy?","text":"<p>The Landing Zone Accelerator provides opinionated configurations that are based on our years of building environments for customers with highly regulated workloads. By using the standard sample configuration, you can expect the architecture in the solution\u2019s Architecture overview to be deployed.</p>"},{"location":"faq/architecture/#is-there-a-sample-configuration-for-my-industry","title":"Is there a sample configuration for my industry?","text":"<p>You may find the current list of supported industry sample configurations in the sample configurations directory of our GitHub repository. Supporting documentation for these sample configurations can be found in the README.md of each configuration directory. </p>"},{"location":"faq/architecture/#how-do-i-customize-what-the-solution-deploys","title":"How do I customize what the solution deploys?","text":"<p>The solution's configuration files are the primary interface for what the accelerator deploys. The supported services, features, and API references for these config files can be found in the User Guide of our GitHub Pages website. You may use the configuration reference to update a sample configuration to meet your organization's needs, or to craft your own configuration from scratch.</p>"},{"location":"faq/ct-cfct/","title":"AWS Control Tower and Customizations for Control Tower (CfCT) FAQ","text":""},{"location":"faq/ct-cfct/#how-does-this-solution-relate-to-aws-control-tower","title":"How does this solution relate to AWS Control Tower?","text":"<p>When used in coordination with AWS Control Tower (CT), Landing Zone Accelerator will utilize the functionality provided by CT directly, such as using the CT Account Factory to generate and enroll new accounts. Landing Zone Accelerator fully intends to utilize AWS Control Tower APIs, when made available, to orchestrate additional features that CT provides, specifically 1/ OU creation and management, 2/ SCP creation and management, and 3/ CT control management. In the interim, Landing Zone Accelerator will not automate any actions that can potentially cause significant drift with CT, such as OU creation. The Landing Zone Accelerator team will work closely with the AWS Control Tower team to look around corners and avoid any one-way doors in design, implementation or deployment.</p>"},{"location":"faq/ct-cfct/#is-landing-zone-accelerator-compatible-with-aws-control-tower","title":"Is Landing Zone Accelerator compatible with AWS Control Tower?","text":"<p>Yes, Landing Zone Accelerator is designed to coordinate directly with AWS Control Tower. AWS strongly recommends that you deploy AWS Control Tower as the foundation for the Landing Zone Accelerator. Landing Zone Accelerator extends the functionality of AWS Control Tower by adding additional orchestration of networking and security services within AWS. The Landing Zone Accelerator can be used to enable and orchestrate additional AWS services and features beyond the current functionality of AWS Control Tower through a simplified set of configuration files.</p> <p>AWS Control Tower provides the easiest way to set up and govern a secure, multi-account AWS environment, also known as a landing zone. AWS Control Tower creates customers\u2019 landing zone using AWS Organizations, bringing ongoing account management and governance as well as implementation best practices based on AWS\u2019s experience working with thousands of customers as they move to the cloud.</p> <p>By using the default Landing Zone Accelerator on AWS sample configurations, you are able to quickly implement technical security controls and infrastructure foundations on AWS, in alignment with AWS best practices and in conformance with multiple, global compliance frameworks. If necessary, Landing Zone Accelerator can be deployed independently of AWS Control Tower to support regions and partitions that are currently not yet supported by AWS Control Tower. Learn more about AWS Control Tower Commercial Region availability here. Learn more about AWS Control Tower GovCloud (US) support here.</p>"},{"location":"faq/ct-cfct/#aws-control-tower-just-added-new-features-that-now-overlap-with-landing-zone-accelerator-what-should-i-do","title":"AWS Control Tower just added new features that now overlap with Landing Zone Accelerator, what should I do?","text":"<p>A key design principle of Landing Zone Accelerator is to evolve over time as new AWS services and features become available. Where possible, Landing Zone Accelerator will defer to native AWS services to deliver functionality and over time will deprecate code/functionality in Landing Zone Accelerator if it can be replaced by a native AWS service such as AWS Control Tower.</p>"},{"location":"faq/ct-cfct/#can-i-create-aws-govcloud-us-accounts-using-landing-zone-accelerator-what-happens-to-the-commercial-account-if-im-using-aws-control-tower","title":"Can I create AWS GovCloud (US) accounts using Landing Zone Accelerator? What happens to the commercial account if I\u2019m using AWS Control Tower?","text":"<p>Yes. You can specify the creation of an AWS GovCloud (US) account through the Landing Zone Accelerator configuration files. This requires that your Management Root account meets the requirements for creating an AWS GovCloud (US) account. After adding the new account information to the Landing Zone Accelerator configuration and releasing the pipeline, Landing Zone Accelerator will automate the creation of a new GovCloud account through the Organizations service. Since the creation of a GovCloud account also creates a commercial pair, the Landing Zone Accelerator will then automate the enrollment of the commercial account using the AWS Control Tower Account Factory Service Catalog product.</p>"},{"location":"faq/ct-cfct/#if-i-deploy-landing-zone-accelerator-now-can-i-enroll-my-environment-into-aws-control-tower-when-the-service-becomes-available-in-my-region-such-as-aws-govcloud-us-adcs","title":"If I deploy Landing Zone Accelerator now, can I enroll my environment into AWS Control Tower when the service becomes available in my region, such as AWS GovCloud (US) ADCs?","text":"<p>Yes. Landing Zone Accelerator is designed to align directly with the landing zone structure that AWS Control Tower provides. Landing Zone Accelerator requires the 3 mandatory accounts that are configured when you enable AWS Control Tower, 1/Management Root, 2/Logging, 3/Audit. When AWS Control Tower becomes available in your region, you will be able to configure your AWS Control Tower landing zone to reuse these same accounts for their specified functions. Additionally, per guidance from the AWS Control Tower service team, where possible, Landing Zone Accelerator will also deploy the same mandatory controls defined by the AWS Control Tower into your environment.</p>"},{"location":"faq/ct-cfct/#how-does-landing-zone-accelerator-relate-to-cfct","title":"How does Landing Zone Accelerator relate to CfCT?","text":"<p>CfCT allows customers to easily add customizations to their AWS Control Tower landing zone using AWS CloudFormation templates and service control policies (SCPs). Customers are able to configure their environment by updating and adding additional functionality to their CloudFormation templates. Customers that want to dive deeper into the foundational AWS resources and building blocks that are provided with CloudFormation, and/or have developmental experience with Infrastructure as Code (IaC), can utilize CfCT to add their customizations. CfCT handles the deployment of CloudFormation templates using StackSets which allows the deployment of up to 2000 stack instances at a time. Customers have the flexibility to define the dependencies and order that their CloudFormation templates should be deployed though the CfCT configuration.</p> <p>Landing Zone Accelerator provides customers with a no-code solution for configuring an enterprise-ready and accreditation-ready environment on AWS. Customers with limited experience with IaC are able to interact with Landing Zone Accelerator through a simplified set of configuration files. Leveraging the AWS Cloud Development Kit (CDK) allows the Landing Zone Accelerator to deploy parallel stacks that go beyond the current instance limits of StackSets. Landing Zone Accelerator handles the dependencies and ordering of the CloudFormation templates and resource deployments; customers simply define what features they want enabled by Landing Zone Accelerator through their configuration files, and Landing Zone Accelerator handles where in the orchestration pipeline to enable the related resources and their dependencies.</p>"},{"location":"faq/ct-cfct/#how-do-i-choose-between-using-landing-zone-accelerator-or-cfct","title":"How do I choose between using Landing Zone Accelerator or CfCT?","text":"<p>Customers should use CfCT if they want to develop and maintain their own CloudFormation templates and also want the ability to define the dependencies and order that they should be deployed through the CfCT configuration across their multi-account environment.</p> <p>Customers should use Landing Zone Accelerator if they want a no-code solution with a simplified set of configuration files that handles the deployment of resources across 35 services and their dependencies across their multi-account environment. Customers should also use Landing Zone Accelerator if they need a solution that can work in all regions and partitions, such as AWS GovCloud (US) and the US Secret and Top Secret regions.</p>"},{"location":"faq/ct-cfct/#can-i-use-both-landing-zone-accelerator-and-cfct-are-there-any-one-way-doors","title":"Can I use both Landing Zone Accelerator and CfCT? Are there any one-way doors?","text":"<p>You can use both Landing Zone Accelerator and CfCT to deploy additional customizations to your CT landing zone. Both Landing Zone Accelerator and CfCT support event driven architectures and post an SNS topic at the completion of their respective pipelines. Subscriptions can be set up against these SNS topics to initiate additional pipelines or custom IaC deployments. This includes having CfCT called after the completion of a Landing Zone Accelerator pipeline and vice versa. For customers that want a hybrid approach of a no-code solution to handle the orchestration and deployment of AWS security and networking services through Landing Zone Accelerator, can then use CfCT to add additional customizations directly with custom-developed CloudFormation templates</p>"},{"location":"faq/ct-cfct/#can-i-deploy-or-manage-existing-aws-control-tower-in-landing-zone-accelerator-solution","title":"Can I deploy or manage existing AWS Control Tower in Landing Zone Accelerator solution?","text":"<p>Using the Landing Zone Accelerator on AWS solution, you can create, update, or reset an AWS Control Tower Landing Zone. It is possible to maintain the AWS Control Tower Landing Zone using the Landing Zone Accelerator solution. When the installer stack of the solution is deployed with the <code>ControlTowerEnabled</code> parameter set to <code>Yes</code>, then the Landing Zone Accelerator can deploy the AWS Control Tower Landing Zone for you. The solution will deploy the AWS Control Tower Landing Zone with the most recent version available.  </p> <p>The Landing Zone Accelerator solution can deploy AWS Control Tower Landing Zone when following pre-requisites are met.</p> <ul> <li>AWS Organizations with all feature enabled</li> </ul> <p>When AWS Organizations are not configured in your environment, the Landing Zone Accelerator solution will return an error. In the event that AWS Organizations has been configured, but not all features have been enabled, the solution will enable all features for your organization. After you create an organization and before you can deploy Landing Zone Accelerator solution, you must verify that you own the email address provided for the management account in the organization.  In order to learn more about setting up an AWS organization, you may refer to this Creating an organization. </p> <ul> <li>No AWS services enabled for AWS Organizations </li> </ul> <p>The Landing Zone Accelerator solution cannot deploy AWS Control Tower Landing Zone if AWS Organizations have any AWS service access enabled.</p> <ul> <li>No organization units in AWS Organizations</li> </ul> <p>The Landing Zone Accelerator solution cannot deploy AWS Control Tower Landing Zone if there are any organizational units in AWS Organizations. AWS Control Tower and the Landing Zone Accelerator solution will create the necessary organization units for the deployment of the AWS Control Tower Landing Zone.</p> <ul> <li>No additional accounts in AWS Organizations</li> </ul> <p>The Landing Zone Accelerator cannot deploy AWS Control Tower Landing Zone when there are other accounts in AWS Organizations than the management account. During the deployment of the AWS Control Tower Landing Zone, the solution will create shared accounts (LogArchive and Audit).</p> <p>GovCloud (US)</p> <p>Since shared accounts (LogArchive and Audit) will be existing in GovCloud (US), AWS Control Tower can be deployed when shared accounts (LogArchive and Audit) are successfully invited into AWS Organizations. The Landing Zone Accelerator requires that only three (3) AWS accounts (Management, LogArchive, and Audit) be part of the AWS Organization.</p> <ul> <li>No AWS IAM Identity Center configured</li> </ul> <p>The Landing Zone Accelerator cannot deploy AWS Control Tower Landing Zone when an existing AWS IAM Identity Center is configured. AWS IAM Identity Center will be deployed during the deployment of the AWS Control Tower Landing Zone.</p> <ul> <li>None of the AWS Control Tower service roles are preset<ul> <li>AWSControlTowerAdmin</li> <li>AWSControlTowerCloudTrailRole</li> <li>AWSControlTowerStackSetRole</li> <li>AWSControlTowerConfigAggregatorRoleForOrganizations</li> </ul> </li> </ul> <p>If there are any AWS Control Tower service roles in the management account, Landing Zone Accelerator cannot deploy the AWS Control Tower Landing Zone. </p> <p>Landing Zone Accelerator performs the following pre-requisites before deploying AWS Control Tower Landing Zone. This document provides more information about AWS Control Tower pre-requisites. The solution will not perform any of the pre-requisites if there is an existing AWS Control Tower Landing Zone.</p> <ul> <li>Deploy AWS Control Tower service roles <ul> <li>AWSControlTowerAdmin</li> <li>AWSControlTowerCloudTrailRole</li> <li>AWSControlTowerStackSetRole</li> <li>AWSControlTowerConfigAggregatorRoleForOrganizations</li> </ul> </li> </ul> <p>The Landing Zone Accelerator will deploy above AWS Control Tower service roles.</p> <ul> <li>Deploy AWS KMS CMK</li> </ul> <p>The Landing Zone Accelerator will deploy AWS KMS CMK to encrypt AWS Control Tower resources.</p> <p>The Landing Zone Accelerator solution will add the following <code>landingZone</code> configuration.</p> <p>GlobalConfig / ControlTowerConfig / ControlTowerLandingZoneConfig</p> <pre><code>landingZone:\n  version: '3.3'\n  logging:\n    loggingBucketRetentionDays: 365\n    accessLoggingBucketRetentionDays: 3650\n    organizationTrail: true\n  security:\n    enableIdentityCenterAccess: true\n</code></pre>"},{"location":"faq/ct-cfct/#aws-control-tower-landing-zone-deployment","title":"AWS Control Tower Landing Zone Deployment","text":"<p>Landing Zone Accelerator will create two organizational units (<code>Security</code> and <code>Infrastructure</code>) when it deploys AWS Control Tower Landing Zone. In addition, AWS Organization level AWS CloudTrail trails will be configured with AWS KMS CMK encryption.</p> <p>In the event that there is already an existing AWS Control Tower Landing Zone, Landing Zone Accelerator will not make any changes to it during initial deployment. In order to manage existing AWS Control Tower Landing Zone through the Landing Zone Accelerator solution, you will need to add <code>landingZone</code> configuration ControlTowerLandingZoneConfig for <code>controlTower</code> configuration GlobalConfig / ControlTowerConfig.</p> <p>If any changes are made to the AWS Control Tower Landing Zone configuration, the Landing Zone Accelerator solution will attempt to update the AWS Control Tower Landing Zone. In the event that the current AWS Control Tower Landing Zone has drifted, the solution will attempt to reset it. </p> <p>The Landing Zone Accelerator solution will update AWS Control Tower Landing Zone when the GlobalConfig.enabledRegions property is modified. In this solution, the AWS Control Tower Landing Zone govern regions will be updated to match those included in GlobalConfig.enabledRegions. </p> <p>Note</p> <p>Due to the fact that the Landing Zone Accelerator may deploy certain global AWS services, such as AWS Identity and Access Management (IAM) and AWS Organizations, the solution will add the global region to the list of governed regions in the AWS Control Tower if the home region of the Landing Zone Accelerator is not the same as the global region.  </p> <p>Important</p> <p>In the event that the Landing Zone Accelerator solution determines that an existing AWS Control Tower Landing Zone needs to be reset or updated due to a change in <code>landingZone</code> ControlTowerLandingZoneConfig configuration, it will validate that the version property of <code>landingZone</code> ControlTowerLandingZoneConfig configuration is similar to the latest version (AWS Control Tower release notes) of AWS Control Tower Landing Zone available. This is due to the fact that changes to AWS Control Tower Landing Zone can only be made when the version matches that of the most recent available version of AWS Control Tower Landing Zone. A version mismatch error will be thrown when the Landing Zone Accelerator solution finds the latest version is not provided in global configuration.</p> <p>Note</p> <p>The AWS Console should be used to enable or disable the region deny property for your AWS Control Tower Landing Zone. Currently, the Landing Zone Accelerator solution does not support the modification of the region deny feature. </p> <p>Important</p> <p>When the AWS Control Tower home region is an opt-in region, deploying the AWS Control Tower Landing Zone using the Landing Zone Accelerator on AWS may fail with the error message <code>AccessDenied</code>. The issue can be resolved by ensuring that the LogArchive and Audit accounts have opt-in regions enabled and then retrying the Control Tower. After Control Tower has been successfully deployed, you can retry the Landing Zone Accelerator pipeline.</p>"},{"location":"faq/ct-cfct/#register-organizational-unit-with-aws-control-tower","title":"Register organizational unit with AWS Control Tower","text":"<p>The Landing Zone Accelerator supports the registration of AWS Organizations organizational units with the AWS Control Tower. </p> <p>If a new organizational unit is found in the organization configuration file, the following activities will be performed by the solution:</p> <ul> <li>Create the AWS Organizations organizational unit.</li> <li>Register the organizational unit with AWS Control Tower.</li> <li>Invite any existing Amazon Web Services accounts to join the AWS Organization and accept the invitation from the invited account.</li> <li>Move the invited accounts into the organizational unit specified in the account configuration file.</li> <li>Enrollment in the AWS Control Tower for the invited accounts</li> </ul> <p>Creating new organizational units and registering with AWS Control Tower is accomplished by adding them to the OrganizationalUnitConfig configuration.</p> <p>Note</p> <p>For existing AWS accounts to be invited into AWS Organizations and registered with AWS Control Tower, the <code>managementAccountAccessRole</code> role in GlobalConfig must be created. It is necessary for this role to include a trust policy that allows the management account to assume the role. The AWS managed policy AdministratorAccess must be assigned to this role. This role allows AWS Control Tower to manage your individual accounts and report information about them to your Audit and Log Archive accounts. The following is an example of a role trust policy. </p> <pre><code>{\n    \"Version\": \"2012-10-17\",\n    \"Statement\": [\n        {\n            \"Effect\": \"Allow\",\n            \"Principal\": {\n                \"Service\": \"controltower.amazonaws.com\",\n                \"AWS\": \"arn:&lt;PARTITION&gt;:iam::&lt;MANAGEMENT_ACCOUNT_ID&gt;:root\"\n            },\n            \"Action\": \"sts:AssumeRole\"\n        }\n    ]\n}\n</code></pre> <p>The Landing Zone Accelerator will check the status of already registered organizational units with the AWS Control Tower. In the event that the registration status has been <code>FAILED</code>, the solution will re-register the organizational unit.</p>"},{"location":"faq/customizations/","title":"LZA Customizations FAQ","text":""},{"location":"faq/customizations/#what-is-customizations-stage","title":"What is Customizations stage?","text":"<p>The customizations stage is used to manage configuration of custom applications, third-party firewall appliances, and CloudFormation stacks. If there are AWS services which are not currently supported natively by the LZA, Customizations offers a solution to create these resources via custom CloudFormation stacks or stacksets. For more information on Customizations and the associated Typedocs, please see: https://awslabs.github.io/landing-zone-accelerator-on-aws/latest/typedocs/v1.6.0/classes/_aws_accelerator_config.CustomizationsConfig.html</p>"},{"location":"faq/customizations/#how-can-i-protect-cloudformation-resources-deployed-via-customizations","title":"How can I protect CloudFormation resources deployed via Customizations?","text":"<p>The Landing Zone Accelerator is intended to give customers the freedom to customize their environment to their compliance requirements and does not enforce deletion protections on CloudFormation resources deployed in the Customizations stage. The recommended approach is to utilize resource-level deletion policies in the CloudFormation stack as shown in the link below: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html</p>"},{"location":"faq/general/","title":"General FAQ","text":""},{"location":"faq/general/#what-is-landing-zone-accelerator-on-aws","title":"What is Landing Zone Accelerator on AWS?","text":"<p>The Landing Zone Accelerator on AWS is an open-source solution that will help customers quickly deploy a secure, scalable, and fully-automated cloud foundation. The Landing Zone Accelerator is architected to align with AWS best practices and in conformance with multiple, global compliance frameworks. When used in coordination with services such as AWS Control Tower, it provides a simplified no-code solution to manage and govern a multi-account environment built to support customers with complex compliance requirements. Additionally, the Landing Zone Accelerator on AWS supports non-standard AWS partitions, including AWS GovCloud (US), and the US Secret and Top Secret regions.</p> <p>The Landing Zone Accelerator is built using the AWS Cloud Development Kit (CDK), and installs directly into a customers environment, where they have full access to the infrastructure as code (IaC) solution. Through a simplified set of configuration files, customers are able to enable additional functionality, guardrails (eg. AWS Managed Config Rules), and manage their foundational networking topology (eg. Transit Gateways and Network Firewall).</p>"},{"location":"faq/general/#why-should-i-use-this-solution","title":"Why should I use this solution?","text":"<p>Landing Zone Accelerator is ideal for customers that don\u2019t have the expertise or don\u2019t want to design an enterprise platform and governance tool chain. Any customer who is looking to build on AWS and wants to do so in a compliant way can use this solution to quickly improve their cloud security posture.</p>"},{"location":"faq/general/#how-does-it-work","title":"How does it work?","text":"<p>Landing Zone Accelerator is installed into your AWS Organizations Management account through AWS CloudFormation. You can utilize a provided default configuration to initialize your environment with technical security controls and foundational infrastructure on AWS that aligns with best practices and conforms with several compliance frameworks. Customers are able to make additional modifications to configuration files, such as adding additional AWS accounts or VPCs.</p>"},{"location":"faq/general/#is-this-solution-only-applicable-to-government-customers","title":"Is this solution only applicable to government customers?","text":"<p>No, Landing Zone Accelerator is applicable for all customers that need to implement an architecture based on best practice security. Deployment is supported in any of the regions where Control Tower is available, as well as AWS GovCloud (US).</p> <p>Landing Zone Accelerator is delivered with sample configuration files which deploy opinionated and prescriptive architectures designed to meet the security and operational requirements of many customers around the world. While installation of the provided prescriptive architectures are reasonably simple, deploying a customized architecture does require extensive understanding of the AWS platform.</p>"},{"location":"faq/general/#will-aws-have-access-to-customers-data-if-they-use-this-solution","title":"Will AWS have access to customer\u2019s data if they use this solution?","text":"<p>No, Landing Zone Accelerator resides within your Management account and is controlled by you. The Landing Zone Accelerator on AWS does not change any of the responsibilities in the Shared Responsibility Model. Another benefit to having the code available as open source is the transparency it brings so customers can be certain of what is being done in their accounts.</p>"},{"location":"faq/general/#where-can-i-get-additional-technical-assistance-for-landing-zone-accelerator","title":"Where can I get additional technical assistance for Landing Zone Accelerator?","text":"<p>Customers are able use the AWS Support console to file issues directly against Landing Zone Accelerator. Please use Service: Control Tower \u2192 Category: Landing Zone Accelerator when filing support tickets.</p>"},{"location":"faq/general/#where-can-i-find-a-software-bill-of-materials-sbom-for-the-landing-zone-accelerator","title":"Where can I find a software bill of materials (SBOM) for the Landing Zone Accelerator?","text":"<p>A software bill of materials can be generated from the Landing Zone Accelerator repository hosted on GitHub. For instructions on how to generate the SBOM, please see Exporting a software bill of materials for your repository.</p>"},{"location":"faq/operations/","title":"Operations FAQ","text":""},{"location":"faq/operations/#how-do-i-manage-my-organizational-units-ous-when-using-ct-and-landing-zone-accelerator","title":"How do I manage my organizational units (OUs) when using CT and Landing Zone Accelerator?","text":"<p>All OUs and accounts that you create in CT are governed automatically by CT. OUs that are generated outside of CT require you to manually enroll the OU with CT before it can be managed and governed by CT. When using CT and Landing Zone Accelerator together, Landing Zone Accelerator will not automate the creation of additional OUs, as there is currently not an automated mechanism to enroll the newly created OU with CT. This design decision minimizes opportunities for environment drift with CT.</p> <p>When using Landing Zone Accelerator without CT, this additional step is not required.</p> <p>For more information on enrolling OUs in Landing Zone Accelerator, please see Adding an Organizational Unit (OU) in the solution implementation guide.</p>"},{"location":"faq/operations/#how-do-i-create-additional-accounts-when-using-ct-and-landing-zone-accelerator","title":"How do I create additional accounts when using CT and Landing Zone Accelerator?","text":"<p>When new account entries are added to the Landing Zone Accelerator <code>accounts-config.yaml</code> configuration file and the Core pipeline is released, Landing Zone Accelerator will utilize the CT Account Factory Service Catalog product to generate the new accounts. Similar to OUs, accounts that are generated outside of CT require you to enroll the account with CT before it can be managed and governed by CT. If you create an account outside of Control Tower (likely directly through the Organizations console or API), you can add the account information to the Landing Zone Accelerator configuration and the solution will automatically enroll the new account into CT using the CT Account Factory Service Catalog product.</p> <p>For more information on enrolling new accounts in Landing Zone Accelerator, please see Adding a new account in the solution implementation guide.</p>"},{"location":"faq/operations/#how-do-i-add-existing-accounts-when-using-ct-and-landing-zone-accelerator","title":"How do I add existing accounts when using CT and Landing Zone Accelerator?","text":"<p>Please refer to Adding an existing account in the solution implementation guide for guidance on adding an existing account to your Landing Zone Accelerator environment.</p>"},{"location":"faq/operations/#how-do-i-manage-my-scps-when-using-ct-and-landing-zone-accelerator","title":"How do I manage my SCPs when using CT and Landing Zone Accelerator?","text":"<p>You can use Landing Zone Accelerator to deploy custom SCPs into your environment in addition to the SCPs that are deployed and managed by CT. Landing Zone Accelerator will only manage SCPs that are part of the accelerator configuration, and will not manage any SCPs that are deployed by CT. Note, Organizations sets a limit of 5 SCPs per OU and CT will consume up to 3 SCPs which will leave 2 additional SCPs that you can add. For finer grained SCPs, Landing Zone Accelerator also allows you to deploy custom SCPs to specific accounts.</p> <p>For more information on managing SCPs in Landing Zone Accelerator, please see Adding a Service Control Policy (SCP) in the solution implementation guide.</p>"},{"location":"faq/operations/#how-do-i-troubleshoot-deployment-and-validation-errors","title":"How do I troubleshoot deployment and validation errors?","text":"<p>Common troubleshooting scenarios are documented in the Troubleshooting section of the solution implementation guide. This section will continue to grow with additional scenarios as common deployment and environment validation error cases are reported.</p>"},{"location":"faq/operations/#how-do-i-troubleshoot-aws-control-tower-landing-zone-deployment-and-validation-errors","title":"How do I troubleshoot AWS Control Tower Landing Zone deployment and validation errors?","text":"<p>It is recommended that you refer to the AWS Control Tower pre-requisites before troubleshooting any issues related to AWS Control Tower Landing Zone deployment.</p>"},{"location":"faq/operations/#common-errors","title":"Common Errors","text":"<p><code>AWSOrganizationsNotInUseException: Your account is not a member of an organization. in accounts-config.yaml config file</code></p> <p>Landing Zone Accelerator may return an error during configuration validation if AWS Organizations is not configured. Please configure AWS Organizations before deploying the solution. In order to learn more about setting up an AWS organization, you may refer to this Creating an organization</p> <p><code>AWS Control Tower Landing Zone cannot deploy because AWS Organizations have not been configured for the environment.</code></p> <p>AWS Control Tower Landing Zone can be deployed using the Landing Zone Accelerator solution when AWS Organizations configured in the environment. AWS Organizations should be configured with all features enabled before Landing Zone Accelerator can be deployed. In order to learn more about setting up an AWS organization, you may refer to this Creating an organization. After you create an organization and before you can deploy Landing Zone Accelerator solution, you must verify that you own the email address provided for the management account in the organization. </p> <p><code>AWS Control Tower Landing Zone cannot deploy because there are multiple organizational units in AWS Organizations.</code></p> <p>The Landing Zone Accelerator solution cannot deploy AWS Control Tower Landing Zone when there are organizational units in AWS Organizations. Prior to deploying the solution, it is necessary to clean up existing organizational units. When there are existing organizational units within the AWS Organizations, it is recommended that AWS Control Tower Landing Zone is manually deployed prior to the deployment of the solution. By adding <code>landingZone</code> ControlTowerLandingZoneConfig configuration, you can manage existing AWS Control Tower Landing Zone.</p> <p><code>AWS Control Tower Landing Zone cannot deploy because there are multiple accounts in AWS Organizations.</code></p> <p>The Landing Zone Accelerator solution cannot deploy AWS Control Tower Landing Zone when there are additional accounts in AWS Organizations. AWS Organizations can have only management account. When there are existing AWS accounts within the AWS Organizations, it is recommended that AWS Control Tower Landing Zone is manually deployed prior to the deployment of the solution. By adding <code>landingZone</code> ControlTowerLandingZoneConfig configuration, you can manage existing AWS Control Tower Landing Zone.</p> <p><code>AWS Control Tower Landing Zone cannot deploy because IAM Identity Center is configured.</code></p> <p>The Landing Zone Accelerator solution cannot deploy AWS Control Tower Landing Zone when there is existing IAM Identity Center configured. When there is existing IAM Identity Center configured, it is recommended that AWS Control Tower Landing Zone is manually deployed prior to the deployment of the solution. By adding <code>landingZone</code> ControlTowerLandingZoneConfig configuration, you can manage existing AWS Control Tower Landing Zone.</p> <p><code>AWS Control Tower Landing Zone cannot deploy because AWS Organizations have services enabled.</code></p> <p>The Landing Zone Accelerator solution cannot deploy AWS Control Tower Landing Zone when there are trusted access with any AWS service is enabled for AWS Organizations. When when there are trusted access with any AWS service is enabled for AWS Organizations, it is recommended that AWS Control Tower Landing Zone is manually deployed prior to the deployment of the solution. By adding <code>landingZone</code> ControlTowerLandingZoneConfig configuration, you can manage existing AWS Control Tower Landing Zone.</p> <p><code>The landing zone update operation failed with error - ConflictException - AWS Control Tower cannot begin landing zone setup while another execution is in progress.</code>,</p> <p>The Landing Zone Accelerator solution cannot update or reset AWS Control Tower Landing Zone when there is already an execution in progress. The current AWS Control Tower change operation must be completed before you can proceed.</p> <p><code>AWS Control Tower Landing Zone's most recent version is &lt;LATEST_VERSION&gt;, which is different from the version &lt;CONFIG_VERSION&gt; specified in global-config.yaml file.</code> </p> <p>Landing Zone Accelerator cannot update or reset AWS Control Tower Landing Zone if the Landing Zone version does not match the latest version of the AWS Control Tower Landing Zone. In order to resolve this issue, it is recommended that you review the AWS Control Tower release notes, and update the version property of <code>landingZone</code> ControlTowerLandingZoneConfig configuration. Alternatively, you may rollback ControlTowerLandingZoneConfig configuration changes so that the solution does not attempt to update the AWS Control Tower Landing Zone. In the event the current AWS Control Tower Landing Zone drifts, the solution will attempt to reset the landing zone, which will require the latest version to be specified in the configuration.</p> <p><code>AWS Control Tower operation with identifier &lt;OPERATION_IDENTIFIER&gt; in FAILED state !!!!. Please investigate CT operation before executing pipeline</code></p> <p>Landing Zone Accelerator returns this error when creating a AWS Control Tower Landing Zone fails with any errors. Resolve the root cause of the AWS Control Tower setup failure before retrying the failed stage of the Landing Zone Accelerator pipeline. It may be possible to identify the root cause of the issue by reviewing AWS CloudTrail trails or AWS CloudFormation stacks. It should be noted that if the home region for the environment is different from the global region, you may need to review trails in the global region as well to identify the root cause.</p>"},{"location":"faq/security/","title":"Security FAQ","text":""},{"location":"faq/security/#what-purpose-do-the-breakglassusers-in-referencesample-configurationslza-sample-configiam-configyaml-serve-and-what-do-i-do-with-them","title":"What purpose do the breakGlassUsers in <code>reference/sample-configurations/lza-sample-config/iam-config.yaml</code> serve, and what do I do with them?","text":"<p>Break glass access is a recommended best practice for gaining access to the organization management account or sub-accounts when there is a security incident or failure of the Identity Provider (IdP) infrastructure. MFA and password reset on next sign-in policies are enforced for break glass users through the <code>iam-policies/boundary-policy.json</code> and <code>iam-config.yaml</code> settings. It is imperative for the organization management admin to register MFA devices and reset the Landing Zone Accelerator generated passwords before they expire, per the <code>maxPasswordAge</code> (https://docs.aws.amazon.com/IAM/latest/APIReference/API_UpdateAccountPasswordPolicy.html) setting in <code>security-config.yaml</code>. Of equal importance is the protection of the hardware MFA devices and passwords against unauthorized disclosure. This often involves enforcing dual authorization, that is, one trusted individual having access to the password and a different trusted individual having access to the MFA token.</p>"},{"location":"faq/logging/cwl/","title":"AWS CloudWatch Log FAQ","text":""},{"location":"faq/logging/cwl/#can-i-configure-cloudwatch-log-group-data-protection-policy","title":"Can I configure CloudWatch Log group data protection policy?","text":"<p>Yes. The Landing Zone Accelerator solution supports CloudWatch Log group data protection policies to safeguard sensitive data that is ingested by CloudWatch Logs. Currently, the Landing Zone Accelerator supports only <code>Credentials</code> CloudWatch Logs managed data identifiers for configuring log group data protection policies. The CloudWatch Logs managed data identifiers for Credentials category can be found here.</p> <p>The Landing Zone Accelerator solution will need the following <code>dataProtection</code> configuration to configure CloudWatch Log group data protection policy. It is possible to restrict the functionality to specific target environments (AWS Accounts and Regions) using the <code>deploymentTargets</code> property.</p> <p>GlobalConfig / LoggingConfig | CloudWatchLogsConfig</p> <pre><code>dataProtection: \n  managedDataIdentifiers:\n    category:\n      - Credentials\n</code></pre> <p>In existing Landing Zone Accelerator environments, if you wish to configure CloudWatch Log group data protection policies, you can add the above <code>dataProtection</code> configuration and deploy the Landing Zone Accelerator pipeline.</p> <p>The Landing Zone Accelerator solution configures CloudWatch Logs data protection audit policies to write audit reports to <code>centralLogBucket</code> Amazon S3 bucket defined in GlobalConfig / LoggingConfig  / CentralLogBucketConfig</p> <p>Note</p> <p>Please note that this feature is only available for AWS Commercial Regions.</p>"},{"location":"faq/networking/direct-connect/","title":"AWS Direct Connect FAQ","text":""},{"location":"faq/networking/direct-connect/#can-i-create-a-direct-connect-dedicated-or-hosted-connection","title":"Can I create a Direct Connect dedicated or hosted connection?","text":"<p>No. Direct Connect dedicated connections must first be requested through the AWS console, approved by AWS, and then ordered through an APN partner or network provider. Hosted connections must be ordered through an APN partner and then accepted in the AWS console. After this prerequisite has been completed, Landing Zone Accelerator can take in the physical connection ID (dxcon-xxxxxx) as a configuration property to create and manage private and transit virtual interfaces.</p> <p>More information: https://docs.aws.amazon.com/directconnect/latest/UserGuide/resiliency_toolkit.html</p>"},{"location":"faq/networking/direct-connect/#can-i-create-a-direct-connect-gateway","title":"Can I create a Direct Connect Gateway?","text":"<p>Yes. A Direct Connect Gateway must be configured in order to configure other features such as virtual interfaces and associations with transit gateways. The gateway as well as other features can be configured in the <code>network-config.yaml</code> accelerator configuration file. It is recommended that the Direct Connect Gateway is configured in the same account that the transit gateway(s) reside in. This enables the accelerator to manage the full lifecycle of transit gateway associations to the Direct Connect Gateway, as well as manage transit gateway static routes, route table associations, and route table propagations that reference the Direct Connect Gateway.</p> <p>See also</p> <p>Direct Connect Gateway configuration reference</p>"},{"location":"faq/networking/direct-connect/#how-do-i-create-a-direct-connect-virtual-interface","title":"How do I create a Direct Connect virtual interface?","text":"<p>You must first complete the prerequisites to set up a physical Direct Connect connection. A Direct Connect Gateway must also be created and managed by the accelerator to create virtual interfaces. Once the physical connection is no longer in a pending state, you can reference the physical connection ID (dxcon-xxxxxx) in the <code>network-config.yaml</code> accelerator configuration file to begin creating virtual interfaces.</p> <p>Note: The accelerator can manage the full lifecycle of a virtual interface if the Direct Connect Gateway and physical connection reside in the same account. Due to billing requirements for Direct Connect owners, this is not always possible. For these use cases, the accelerator can also allocate hosted virtual interfaces, but there is a manual billing acceptance step that must be completed by a human after the initial creation.</p> <p>See also</p> <p>Direct Connect virtual interface configuration reference</p>"},{"location":"faq/networking/direct-connect/#can-i-create-a-hosted-virtual-interface","title":"Can I create a hosted virtual interface?","text":"<p>Yes. If the <code>ownerAccount</code> property of the virtual interface configuration specifies a different account than the <code>account</code> property of the Direct Connect Gateway, the accelerator CDK application will create a hosted virtual interface allocation from the account that owns the physical connection to the Direct Connect Gateway owner account. Virtual interface allocations must be manually accepted after creation and attached to a Direct Connect Gateway in order to be used. The accelerator will not manage this acceptance process as it is billing-related and should be explicitly reviewed by a human or automation outside of the accelerator.</p> <p>Notes:</p> <ul> <li>The physical connection must be owned by an account managed by the accelerator.</li> <li>After the initial creation of the hosted virtual interface, the <code>interfaceName</code> and <code>tags</code> properties can no longer be managed by the accelerator. However, <code>jumboFrames</code> and <code>enableSiteLink</code> may still be updated.</li> </ul>"},{"location":"faq/networking/direct-connect/#how-do-i-associate-a-direct-connect-gateway-with-a-transit-gateway","title":"How do I associate a Direct Connect Gateway with a Transit Gateway?","text":"<p>It is required that both the Direct Connect Gateway and Transit Gateway are managed by the accelerator. An association to a transit gateway can be configured in the <code>network-config.yaml</code> accelerator configuration file. It is recommended that both gateways reside in the same account, however due to billing requirements for some organizations, this is not always possible. For these use cases, the accelerator can also create an association proposal from a Transit Gateway owner account to a Direct Connect Gateway owner account. This is determined dynamically by the CDK application based on the <code>account</code> property of each resource.</p> <p>Notes:</p> <ul> <li>There are limitations with association proposals. After the initial proposal is created, a manual acceptance process must be completed. The accelerator will not manage this acceptance process as it is billing-related and should be explicitly reviewed by a human. Updates to the proposal (i.e. allowed route prefixes) can be made via the accelerator, but must be reviewed and approved by a human or automation outside of the accelerator.</li> <li>Gateway associations configured in the same account can additionally manage transit gateway static routes, route table associations, and route table propagations via the accelerator. Association proposals cannot manage these additional features.</li> <li>The association process between a Direct Connect Gateway and Transit Gateway can take anywhere from five to twenty minutes on average. The length of time depends on current load of the Direct Connect control plane in the region the association is occurring. Your pipeline progression will be paused until it validates the association has completed.</li> </ul> <p>See also</p> <p>Direct Connect Gateway Transit Gateway association reference</p>"},{"location":"faq/networking/direct-connect/#why-is-my-networkassociations-stack-in-update_rollback_complete-status-after-adding-a-transit-gateway-association","title":"Why is my NetworkAssociations stack in UPDATE_ROLLBACK_COMPLETE status after adding a Transit Gateway Association?","text":"<p>The association process between a Direct Connect Gateway and Transit Gateway can take anywhere from five to twenty minutes on average. The length of time depends on current load of the Direct Connect control plane in the region the association is occurring. Prior to v1.3.0, the accelerator was utilizing an AWS Lambda-backed custom resource to process this association and validate its completion. If the association took longer than 15 minutes, the Lambda would time out and cause this error. If running a version prior to v1.3.0, you can safely retry the Deploy stage of the pipeline after the association has completed to get past this error, and it will not occur on subsequent runs.</p> <p>As of v1.3.0, this issue has been rectified and the custom resource should no longer fail after 15 minutes. Note that the association process will pause pipeline progression until it has completed.</p>"},{"location":"faq/networking/dpi/","title":"Deep Packet Inspection FAQ","text":""},{"location":"faq/networking/dpi/#what-architectural-design-patterns-can-i-leverage-with-landing-zone-accelerator","title":"What architectural design patterns can I leverage with Landing Zone Accelerator?","text":"<p>The accelerator network configuration offers much flexibility in terms of core network design. The accelerator supports all common strategies for deep packet inspection architectures, including north-south and east-west patterns using a hub-spoke design with centralized inspection VPC. One caveat to this flexibility is our prescriptive approach to network centralization, meaning that a member account must be explicitly defined as a <code>delegatedAdminAccount</code> to own central network resources under the <code>centralNetworkServices</code> configuration block. This design strategy is derived from our years of experience as well as best practices defined in AWS Whitepapers and Prescriptive Guidance patterns.</p> <p>Using the accelerator, you can define any number of core and workload VPCs for your environment. For network security purposes, a centralized inspection or firewall VPC should be established in the delegated administrator account. This VPC is used for deploying either AWS Network Firewall or Gateway Load Balancer. You define your network boundaries and filtering rules via policies applied to the Network Firewall or third-party security appliances behind Gateway Load Balancer. You can then define a routing strategy via Transit Gateway and VPC subnet route tables to ensure your north-south and east-west traffic is inspected and filtered appropriately.</p> <p>See also</p> <ul> <li>AWS Whitepaper: Building a Scalable and Secure Multi-VPC AWS Network Infrastructure</li> <li>AWS Prescriptive Guidance: The AWS Security Reference Architecture</li> </ul>"},{"location":"faq/networking/dpi/#how-do-i-enable-inspection-at-the-edge-of-my-vpc-for-public-facing-workloads","title":"How do I enable inspection at the edge of my VPC for public-facing workloads?","text":"<p>This can be accomplished by configuring a gateway route table for your workload VPCs and targeting a Gateway Load Balancer or AWS Network Firewall endpoint deployed to a subnet in that VPC. Using the accelerator, you can do this by configuring the <code>gatewayAssociation</code> property for a VPC route table. Traffic traverses these VPC endpoints transparently, meaning source IP addresses are preserved. This allows fine-grained inspection of network traffic based on external/untrusted security zones defined in the configuration of the Network Firewall or backend security appliance policy. Gateway route tables can be associated with a VPC\u2019s internet gateway or virtual private gateway.</p> <p>See also</p> <ul> <li>Route table configuration reference</li> <li>AWS PrivateLink Developer Guide: More information on traffic patterns for edge inspection</li> </ul>"},{"location":"faq/networking/general/","title":"General Networking FAQ","text":""},{"location":"faq/networking/general/#what-is-the-purpose-of-the-centralnetworkservices-configuration-block","title":"What is the purpose of the <code>centralNetworkServices</code> configuration block?","text":"<p>This configuration block in <code>network-config.yaml</code> is a collection of several advanced networking services such as Route 53 Resolver, AWS Network Firewall, VPC IPAM, and Gateway Load Balancer. This collection of services and features support the concept of network centralization in AWS, meaning that a single member account (designated as <code>delegatedAdminAccount</code> in the configuration file) owns the resources. This strategy reduces the complexity, cost, and maintenance overhead of cloud network architectures, as core networking components are all centralized in a single member account of the organization.</p> <p>Each resource housed in this account can be shared with the rest of the organization via AWS Resource Access Manager (RAM) or other means such as network routing strategies or VPC endpoint distribution. For example, in the case of centralized packet inspection via AWS Network Firewall or Gateway Load Balancer, VPC endpoints can be distributed to other member accounts that enable consumption of the services by your workloads. You may also design network architectures using Transit Gateway that \u201cforce\u201d packets through a centralized inspection VPC prior to reaching their destination.</p> <p>In addition, many newer AWS networking services are beginning to adopt the concept of \u201cdelegated administration,\u201d meaning that a member account is delegated administrative authority for a service or set of services. This is identical to the functionality of security service delegated administration that has become a staple of centralized security operations in the cloud. The delegatedAdminAccount will be used for this purpose, along with the uses listed above. VPC IPAM is the first feature to use this paradigm, and forthcoming features in the accelerator will enable it if available.</p>"},{"location":"faq/networking/general/#what-are-the-differences-between-the-vpcs-and-vpctemplates-configuration-blocks","title":"What are the differences between the <code>vpcs</code> and <code>vpcTemplates</code> configuration blocks?","text":"<p>The <code>vpcs</code> block serves as a way to define VPCs that are only meant to be deployed to a single account and region. This block is useful for defining core VPCs, such as a VPC for centralized interface endpoints and/or centralized deep packet inspection. This can also be leveraged to deploy one-off workload VPCs, but if a \u201ct-shirt sizing\u201d strategy has been established for your cloud infrastructure, <code>vpcTemplates</code> is likely a better configuration strategy for your workload VPCs.</p> <p><code>vpcTemplates</code> is useful for deploying a standard VPC size across multiple workload accounts or organizational units (OUs) in a single region. An example of this would be deploying a standard workload VPC to all accounts under a development OU. This feature utilizes VPC IPAM to ensure VPC CIDR ranges do not conflict but are provisioned with the same CIDR prefix length across all deployment target accounts. So long as the IPAM pool is not depleted, new VPCs will automatically be vended when accounts are registered to an OU and the accelerator pipeline is released, unless the account is explicitly excluded in the <code>deploymentTargets</code> configuration property.</p>"},{"location":"faq/networking/general/#how-do-i-define-a-centralized-interface-endpoint-vpc","title":"How do I define a centralized interface endpoint VPC?","text":"<p>Landing Zone Accelerator automates the heavy lifting associated with the configuration and management of a centralized interface endpoint VPC. This is facilitated through the <code>central</code> property under the <code>interfaceEndpoints</code> configuration in a VpcConfig. Setting <code>central: true</code> will automate the provisioning of Route 53 private hosted zones for each endpoint service defined under this <code>interfaceEndpoints</code> configuration.</p> <p>Additionally, to utilize these central endpoints from other VPCs and VPC templates, you may define <code>useCentralEndpoints: true</code> in their respective configuration blocks in order to automate the necessary private hosted zone associations to those VPCs.</p> <p>Notes:</p> <ol> <li>Additional network routing, such as routes via Transit Gateway or VPC peering, must be in place so API calls from spoke VPCs can reach the central interface endpoints VPC.</li> <li>Only one central interface endpoint VPC may be defined per AWS region.</li> <li>A VPC template cannot be used as a target for central endpoints.</li> </ol> <p>See also</p> <p>For additional information on this design pattern, refer to Centralized access to VPC private endpoints from the AWS Whitepaper Building a Scalable and Secure Multi-VPC AWS Network Infrastructure</p>"},{"location":"faq/networking/general/#why-do-i-see-default-vpcs-in-some-regions-when-the-delete-parameter-in-defaultvpc-is-enabled","title":"Why do I see default VPCs in some regions when the <code>delete</code> parameter in <code>defaultVpc</code> is enabled?","text":"<p>Landing Zone Accelerator provisions AWS CloudFormation stacks in regions that are specified in the <code>global-config.yaml</code> configuration file. In these regions, networking resources are deployed via the CloudFormation stacks. The deletion of the Default Amazon Virtual Private Cloud (VPC) are handled through a custom resource provisioned in the Network-Vpc stack. This custom resource invokes an AWS Lambda function to delete common VPC resources that are attached to the default VPC, then delete the VPC itself. At the time of this writing, the Landing Zone Accelerator only deletes the default VPCs from regions designated as <code>enabledRegions</code> in <code>global-config.yaml</code>.</p> <p>For example: A user has the following regions enabled via the Landing Zone Accelerator:</p> <p>global-config.yaml</p> <pre><code>homeRegion: us-east-1\nenabledRegions:\n  - us-east-1\n  - eu-west-2\n</code></pre> <p>They have enabled the deletion of the default VPCs in their operating regions.</p> <p>network-config.yaml</p> <pre><code>defaultVpc:\n  delete: true\n  excludeAccounts: []\n</code></pre> <p>The user navigates to us-east-2 in their console and verifies that the Default VPC still remains. This is because the Network-Vpc CloudFormation stack has not been deployed in this region to execute the process of deleting the default VPC for this region. In this event, a user will have to seek alternative methods to deleting these VPCs from their accounts. One such method is through the CLI, please refer to the documentation for more information.</p>"},{"location":"faq/networking/gwlb/","title":"AWS Gateway Load Balancer FAQ","text":""},{"location":"faq/networking/gwlb/#can-i-create-a-gateway-load-balancer","title":"Can I create a Gateway Load Balancer?","text":"<p>Yes. A Gateway Load Balancer (GWLB) must be configured to take advantage of other features such as GWLB endpoints and subnet and gateway route tables targeting GWLB endpoints. The GWLB as well as other features can be configured in the <code>network-config.yaml</code> accelerator configuration file. Gateway Load Balancers must be deployed to a VPC that is owned by the <code>delegatedAdminAccount</code>, however endpoints for the service can be distributed to any member account.</p> <p>Note: Availability Zone (AZ) mappings differ between accounts. This means the actual AZ that zone A maps to in one account will likely differ in another member account of your organization. Before deploying a GWLB, ensure that these mappings are documented and your remaining network infrastructure is planned around these mappings.</p> <p>GWLB endpoints are dependent on endpoint services, which are strictly zonal. This means an error will occur if you try to create an endpoint in a zone that that the GWLB was not deployed to. A workaround for this is to deploy your GWLB to all AZs in a region, however this may increase costs associated with data transfer between AZs.</p> <p>See also</p> <ul> <li>Gateway Load Balancer configuration reference</li> <li>AWS PrivateLink Developer Guide: More information on zonal dependencies for GWLB endpoints</li> </ul>"},{"location":"faq/networking/gwlb/#can-i-create-a-target-group-for-my-gateway-load-balancer","title":"Can I create a target group for my Gateway Load Balancer?","text":"<p>Yes. As of v1.3.0 of the accelerator, EC2-based next-generation firewalls and target groups may be defined in the <code>customizations-config.yaml</code> accelerator configuration file. You may reference the target group name as the <code>targetGroup</code> property of a Gateway Load Balancer configuration in <code>network-config.yaml</code>, which tells the accelerator to place the configured instances/autoscaling groups into a target group for that Gateway Load Balancer.</p> <p>Note: Gateway Load Balancers only support target groups using the GENEVE protocol and port 6081. If the target group uses any other configuration, an error will be thrown during the validation.</p>"},{"location":"faq/networking/gwlb/#how-do-i-deploy-gateway-load-balancer-endpoints","title":"How do I deploy Gateway Load Balancer endpoints?","text":"<p>GWLB endpoints are configured under the <code>endpoints</code> property of the <code>gatewayLoadBalancers</code> configuration object in the <code>network-config.yaml</code> accelerator configuration file. Endpoints can be deployed to any account that the accelerator manages, enabling the concept of separate security trust zones for north-south and east-west packet flows. These endpoints are consumers of an endpoint service that is created alongside the Gateway Load Balancer.</p> <p>Successful creation of cross-account endpoints is dependent on the Availability Zones the GWLB is deployed to. Please refer to the guidance under Can I create a Gateway Load Balancer? for more information.</p>"},{"location":"faq/networking/network-firewall/","title":"AWS Network Firewall FAQ","text":""},{"location":"faq/networking/network-firewall/#can-i-create-a-network-firewall","title":"Can I create a Network Firewall?","text":"<p>Yes. AWS Network Firewalls (ANFWs) can be created and managed by the accelerator. ANFWs must be configured to take advantage of other accelerator features such as subnet and gateway route tables targeting ANFW endpoints. The ANFW as well as other associated features can be configured in the <code>network-config.yaml</code> accelerator configuration file. ANFW rule groups and policies are centrally managed in the <code>delegatedAdminAccount</code>, however they can be shared via AWS Resource Access Manager (RAM) to other member accounts for consumption. ANFW endpoints can be created in any member account, so long as the associated policy has been shared to that account or the organizational unit (OU) in which it resides.</p> <p>See also</p> <p>AWS Network Firewall configuration reference</p>"},{"location":"faq/networking/network-firewall/#what-is-the-relationship-between-firewalls-policies-and-rule-groups","title":"What is the relationship between firewalls, policies, and rule groups?","text":"<p>Firewalls have a one-to-one relationship with policies. Policies have a one-to-many relationship with rule groups. Rules defined within the rule groups are the explicit stateful and/or stateless inspection criteria for traffic passing through a firewall endpoint. When defining your ANFW configuration in the accelerator, it helps to work backwards from where the firewall endpoints will be deployed and what workloads the endpoints will be inspecting. From there you can define a policy and associated rule groups for those firewall endpoints to protect security trust zones that you\u2019ve defined for your environment.</p> <p>See also</p> <p>AWS Network Firewall Developer Guide: More information on Network Firewall components</p>"},{"location":"faq/networking/network-firewall/#how-do-i-deploy-firewall-endpoints","title":"How do I deploy firewall endpoints?","text":"<p>Firewalls and their associated configuration properties are defined under the <code>firewalls</code> property of the <code>networkFirewall</code> object in the <code>network-config.yaml</code> accelerator configuration file. A firewall endpoint will be deployed in each VPC subnet specified in the <code>subnets</code> configuration property, so long as those subnets are contained within the VPC configured as the <code>vpc</code> property.</p> <p>Note: Firewall endpoints are zonal resources, and as such a best practice is to deploy an endpoint per Availability Zone that will be enabled in your environment. This ensures your inspection infrastructure remains highly available and routing blackholes do not occur in the case of zone failure.</p> <p>See also</p> <p>Firewall configuration reference</p>"},{"location":"sample-configurations/","title":"Sample Configurations","text":"<p>This section contains details about the sample configurations provided for the Landing Zone Accelerator on AWS solution. These configurations are frequently updated as AWS services and features evolve. If you are adopting one of these samples, we highly recommend that you continue to review the updates to the respective sample configuration and apply the enhancements that are relevant to your environment.</p> <p>Subpages</p> <ul> <li>Standard</li> <li>GovCloud (US)</li> </ul> <p>See also</p> <ul> <li>Support for specific regions and industries </li> </ul>"},{"location":"sample-configurations/govcloud-us/","title":"GovCloud (US) Configuration","text":"<p>This section outlines the sample configuration intended for United States Federal and Department of Defense (DoD) customers operating in GovCloud (US) AWS regions. Please continue reading the subpages for important design and architectural considerations when using this sample.</p> <p>Subpages</p> <ul> <li>Overview</li> <li>Organization and Account Structure</li> <li>Security Controls</li> <li>Networking</li> <li>Additional Considerations</li> </ul> <p>See also</p> <ul> <li>GitHub - LZA GovCloud (US) Sample Configuration</li> </ul>"},{"location":"sample-configurations/govcloud-us/considerations/","title":"Additional Considerations","text":"<p>AWS provides resources that you should consult as you begin customizing your deployment:</p> <ol> <li> <p>Refer to the Best Practices for Organizational Units with AWS Organizations blog post for an overview.</p> </li> <li> <p>Recommended OUs and accounts. This section of the Organizing your AWS Environment Using Multiple Accounts paper discusses the deployment of specific-purpose OUs in addition to the foundational ones established by the LZA. For example, you may wish to establish a Sandbox OU for Experimentation, a Policy Staging OU to safely test policy changes before deploying them more broadly, or a Suspended OU to hold, constrain, and eventually retire accounts that you no longer need.</p> </li> <li> <p>AWS Security Reference Architecture (SRA). The SRA \\\"is a holistic set of guidelines for deploying the full complement of AWS security services in a multi-account environment.\\\" This document is aimed at helping you to explore the \\\"big picture\\\" of AWS security and security-related services in order to determine the architectures most suited to your organization\\'s unique security requirements.</p> </li> </ol>"},{"location":"sample-configurations/govcloud-us/considerations/#references","title":"References","text":"<ul> <li> <p>LZA on AWS Implementation Guide. This is the official documentation of the Landing Zone Accelerator Project and serves as your starting point. Use the instructions in the implementation guide to stand up your environment.</p> </li> <li> <p>AWS Labs LZA Accelerator GitHub Repository. The official codebase of the Landing Zone Accelerator Project.</p> </li> </ul>"},{"location":"sample-configurations/govcloud-us/networking/","title":"Networking","text":"<p>The default network-config.yaml configuration will deploy an AWS Virtual Private Cloud (VPC) with a primary Classless Inter-Domain Routing (CIDR) block of 10.0.0.0/16.</p> <p>The LZA solution provides the flexibility to easily deploy additional services to suit your cloud computing needs. The default deployment does not include enablement of select services, such as a NAT gateway, AWS Network Firewall, or AWS Transit Gateway. You should evaluate the configuration options to configure the network architecture in accordance with your infrastructure needs.</p> <p>The following network diagram is an example foundational network topology. The diagram identifies the use of an inspection VPC for where traffic can be inspected and filtered, such as through the use of a web application firewall and intrusion detection/intrusion prevention system. Network communications among VPCs are facilitated through the use of Transit Gateways.</p> <p></p>"},{"location":"sample-configurations/govcloud-us/org-structure/","title":"Organization and Account Structure","text":"<p>An overview of the LZA organizational structure is shown in the following image. However, you are free to change the organizational structure, Organizational Units (OUs), and accounts to meet your specific needs.</p> <p>For additional information about how to best organize your AWS OU and account structure, please reference the Recommended OUs and accounts in the For Further Consideration section below as you begin to experiment.</p> <p></p> <p>By default, the config builds the above organizational structure, with the exception of the Infrastructure and Security OU, which are predefined by you prior to launching the LZA. The following provides an overview of the network infrastructure.</p> <p>The Infrastructure OU provides the following specialized functions:</p> <ul> <li> <p>The GovCloudNetwork account contains a network inspection VPC for inspecting AWS traffic as well as routing traffic to and from the Internet. Traffic will flow through the Network-Main Transit Gateway, where it can be inspected by AWS Network Firewall before being blocked or continuing to the internet or its final destination.</p> </li> <li> <p>The GovCloudSharedServices VPC is intended to house centrally shared services that are accessible to all of the accounts in the infrastructure. For example, you might deploy central security services such as Endpoint Detection and Response (EDR) or a central directory service such as LDAP. This central location and corresponding route tables allow you to efficiently design your network and compartmentalize access control accordingly</p> </li> </ul>"},{"location":"sample-configurations/govcloud-us/overview/","title":"GovCloud (US) Configuration Overview","text":"<p>This config is an industry specific deployment of the Landing Zone Accelerator on AWS solution. This solution helps automate the setup of a cloud environment and establishes platform readiness with security, compliance, and operational capabilities in AWS GovCloud (US).</p> <p>The solution is architected to follow the Federal Risk and Authorization Management Program (FedRAMP), National Institute of Standards and Technology (NIST) 800-53(5), NIST 800-171 Rev.2, and Cybersecurity Maturity Model Certification (CMMC) Level 2 compliance framework control requirements. Through the use of LZA, preventative and detective guardrails are applied to vended accounts that helps customers to align their cloud-based workloads with their compliance requirements.</p> <p>The LZA is not meant to be feature complete for full compliance, but rather is intended to help accelerate new cloud deployments, cloud migrations, and cloud refactoring efforts. The LZA reduces the effort required to manually build a production-ready infrastructure. It is important to note that the LZA solution will not, by itself, make you compliant. It provides the foundational infrastructure from which additional complementary solutions can be integrated, but you will still need to tailor it to your unique business needs.</p> <p>Important</p> <p>AWS Control Tower has been enabled in the latest sample configuration. New deployments will automatically leverage AWS Control Tower to streamline your multi-account environment. If you are an existing customer using AWS Organizations, you can continue using your current configuration.</p>"},{"location":"sample-configurations/govcloud-us/security-controls/","title":"Security Controls","text":"<p>The LZA aims to be prescriptive in applying best practices for space customers, it intentionally avoids being overly prescriptive out of deference to the unique realities for each individual organization. Consider the baseline as a foundational starting point.</p> <p>The config deploys security controls that provide detective or preventative guardrails in the AWS environment. Collectively, the applied security controls help to accelerate your path to compliance. Configuration of the LZA is done through multiple configuration files. Through the LZA, security controls are applied to accounts to drive conformance with compliance framework requirements.</p> <p>All of the LZA configuration files align with LZA sample configuration. The following is an overview of the LZA configuration files. You are encouraged to review these settings to better understand what has already been configured and what needs to be altered for your specific requirements.</p>"},{"location":"sample-configurations/govcloud-us/security-controls/#global-configyaml","title":"global-config.yaml","text":"<p>The global-config.yaml file contains the settings that enable centralized logging using AWS CloudTrail and Amazon CloudWatch Logs. The configuration establishes the retention period for those logs to help you meet your specific auditing and monitoring needs.</p> <p>You are encouraged to review these settings to better understand what has already been configured and what needs to be altered for your specific requirements.</p>"},{"location":"sample-configurations/govcloud-us/security-controls/#organization-configyaml","title":"organization-config.yaml","text":"<p>Within the organization-config.yaml file there are sections for declaring Service Control Policies (SCPs). SCPs are a type of organization policy that you can use to manage permissions in your organization. SCPs offer central control over the maximum available permissions for all accounts in your organization.</p> <p>SCPs can be highly specific to an organization and its workloads. The SCPs should be reviewed and modified to meet your specific requirements. The following sample policies have been provided within the configuration.</p> <ul> <li> <p>guardrails-1.json: This SCP restricts permissions to manipulate or delete AWS Config rules and Lambda functions. It also prevents disabling of Amazon EBS encryption.</p> </li> <li> <p>guardrails-2.json: This SCP restricts the ability to delete or manipulate the password policy, manipulate AWS IAM roles, or make changes to security services such as Amazon GuardDuty and AWS Security Hub.</p> </li> <li> <p>Quarantine: This SCP is used to prevent changes to new accounts until the LZA has been executed successfully and control applied.</p> </li> </ul> <p>It is important to note that SCPs are not automatically updated and that changes to the eligible service list may require the SCP to be updated. However, these sample SCPs are an example of how your organization can ensure that a select list of AWS services are used for specific use cases.</p>"},{"location":"sample-configurations/govcloud-us/security-controls/#security-configyaml","title":"security-config.yaml","text":"<p>The security-config.yaml is designed to deploy a number of preventative and detective measures that align with the Federal Risk and Authorization Management Program (FedRAMP), National Institute of Standards and Technology (NIST) 800-53(5), NIST 800-171 Rev.2, and Cybersecurity Maturity Model Certification (CMMC) Level 2 compliance framework control requirements. The security-config.yaml establishes the use of multiple security services and configurations such as AWS Config, Amazon GuardDuty, and AWS Security Hub.</p> <p>It establishes minimum AWS Identity and Access Management password requirements that are aligned with AWS best practices to set a password length of 14. This exceeds NIST\u2019s 800-63B latest password guidance that establishes a minimum password length of 8. If you need to comply with this please change the IAM Password Policy appropriately as noted in the security-config.yaml file. Consider reviewing the configuration details to determine conformance with your organization\u2019s compliance requirements if they extend beyond the control frameworks\u2019 prescribed guidance</p> <p>The LZA provides the capability to easily enable additional security services. Detective guardrails are established through the use of Security Hub and Config, which deploy managed Config rules. These rules evaluate whether the configuration settings of your AWS resources comply with common best practices. By default the config rules are aligned to be deployed to both GovCloud East/West. The LZA enables the security standards in the Security Hub which includes AWS Foundational Security Best Practices (FSBP), Center for Internet Security (CIS) AWS Foundations Benchmark v1.4.0, and NIST SP 800-53 Rev. 5.</p> <p>A sample mapping between FedRAMP control requirements and LZA implementation is provided within The AWS Landing Zone Accelerator Verified Reference Architecture Whitepaper for FedRAMP package. The package is available for customer download in AWS Artifact in both the AWS Standard and the AWS GovCloud (US) regions. Many compliance frameworks are similar and have overlapping requirements. Often times, the same managed Config rules can be categorically applied to other compliance frameworks, such as CMMC.</p>"},{"location":"sample-configurations/standard/","title":"Standard Configuration","text":"<p>This section outlines the standard sample configuration intended for commercial AWS regions. Please continue reading the subpages for important design and architectural considerations when using this sample.</p> <p>Subpages</p> <ul> <li>Overview</li> <li>Organization and Account Structure</li> <li>Authentication and Authorization</li> <li>Logging and Monitoring</li> <li>Networking</li> </ul> <p>See also</p> <ul> <li>GitHub - LZA Standard Sample Configuration</li> </ul>"},{"location":"sample-configurations/standard/authn-authz/","title":"Authentication and Authorization","text":""},{"location":"sample-configurations/standard/authn-authz/#overview","title":"Overview","text":"<p>The Landing Zone Accelerator makes extensive use of AWS authorization and authentication primitives from the Identity and Access Management (IAM) service as a means to enforce the guardrail objectives of the Landing Zone Accelerator and govern access to the set of accounts that makes up the organization.</p>"},{"location":"sample-configurations/standard/authn-authz/#relationship-to-the-management-root-aws-account","title":"Relationship to the Management (root) AWS Account","text":"<p>By default, AWS accounts are entirely self-contained with respect to IAM principals - their Users, Roles, Groups are independent and scoped only to themselves. Accounts created by AWS Organizations deploy a default role with a trust policy back to the Organization Management account. While it can be customized, by default this role is named the <code>AWSControlTowerExecution</code> (or <code>OrganizationAccountAccessRole</code> when AWS Organizations is used without Control Tower).</p>"},{"location":"sample-configurations/standard/authn-authz/#aws-iam-identity-center-successor-to-aws-single-sign-on","title":"AWS IAM Identity Center (successor to AWS Single Sign-On)","text":"<p>The vast majority of end-users of the AWS cloud within the organization will never use or interact with the Management account or the root users of any child account in the organization.</p> <p>AWS IAM Identity Center (AWS IIC) resides in the Organization Management account. Once deployed from the Organization Management account, it is recommended that AWS IIC administration is delegated to the Shared Services account. AWS IIC lets you create user, group, and role-based identities directly using a default local identity provider (IdP). Alternatively, if your organization has an existing IdP such as Microsoft Active Directory or Okta Universal Directory, it is recommended to set up federation with that identity provider. This allows you take advantage of your existing identity and access management processes for identities accessing your AWS environment.</p>"},{"location":"sample-configurations/standard/authn-authz/#break-glass-accounts","title":"Break Glass Accounts","text":"<p>The Management account is used to provide break glass access to AWS accounts within the organization. The details of the break glass usernames can be found within iam-config.yaml. The password details can be found in the Management account AWS Secrets Manager in the region LZA was deployed to. After the deployment of the sample configuration files is complete, multi-factor authentication (MFA) should be enabled on these accounts (please see the next section for more details).</p>"},{"location":"sample-configurations/standard/authn-authz/#multi-factor-authentication-mfa","title":"Multi-Factor Authentication (MFA)","text":"<p>MFA should be used by all users regardless of privilege level with some general guidelines. A number of commonly popular MFA mechanisms are supported by AWS to help customers enable MFA on their accounts.</p>"},{"location":"sample-configurations/standard/authn-authz/#root-authorization","title":"Root Authorization","text":"<p>Every AWS account has a set of root user credentials. These root credentials are generated on account creation with a random 64-character password. It is important that the root credentials for each account are recovered and MFA enabled using the AWS root credential password reset process for the account\u2019s unique email address.</p> <p>Root credentials authorize all actions for all AWS services and for all resources in the account (except anything denied by service control policies (SCPs)). There are some actions which only root has the capability to perform which are documented within the AWS documentation. These are typically rare operations (e.g. creation of X.509 keys), and should not be required in the normal course of business. Root credentials should be handled with extreme diligence and have MFA enabled per the guidance in the previous section.</p>"},{"location":"sample-configurations/standard/authn-authz/#service-control-policies-scps","title":"Service Control Policies (SCPs)","text":"<p>Service Control Policies are a key preventative control used by the LZA. It is crucial to note that SCPs, by themselves, never grant permissions. They are most often used to <code>Deny</code> certain actions at an OU or account level within an AWS Organization. Since <code>Deny</code> always overrides <code>Allow</code> in the IAM policy evaluation logic, SCPs can have a powerful effect on all principals in any account, and can deny entire categories of actions irrespective of the permission policy attached to the principal itself - even the root user of the account.</p> <p>SCPs follow an inheritance pattern from all levels of the hierarchy down to the account of the organization:</p> <p></p> <p>In order for any principal to be able to perform an action A, it is necessary (but not sufficient) that there is an <code>Allow</code> on action A from all levels of the hierarchy down to the account, and no explicit <code>Deny</code> anywhere. This is discussed in further detail in How SCPs Work.</p> <p>The LZA leverages the following SCPs in the organization:</p>"},{"location":"sample-configurations/standard/authn-authz/#guardrails-1-and-2","title":"Guardrails 1 and 2","text":"<p>These guardrails apply across the organization and protect the resources deployed by the automation tooling. Note that this policy is split into two parts due to a current quota of SCP document sizing, but logically it should be considered a single policy: part 1 and part 2.</p> Policy Statement ID (SID) Description CloudFormationStatement Prevents deletion of any CloudFormation stacks deployed by the automation tooling --- --- IamRolesStatement Prevents any IAM operation on protected IAM resources PreventSSMModification Prevents deletion of any SSM Parameter deployed by the automation tooling PreventCloudWatchLogsModification Prevents the deletion and modification of any CloudWatch Log groups PreventCloudWatchLogStreamModification Prevents deletion of CloudWatch Log Streams LambdaStatement Prevents the creation, deletion and modification of any Lambda functions deployed by the automation tooling PreventCloudTrailModification Prevents deletion and modification of protected Cloud Trails ConfigRulesStatement Protects AWS Config configuration from modification or deletion IamSettingsStatement Protects creation, deletion, and modification of protected IAM policies GDSecHubServicesStatement Prevents the deletion and modification to AWS security services GuardDuty, Security Hub SnsStatement Prevents creation, deletion and modification of a protected SNS topics EbsEncryptionStatement Prevents disabling of EBS Encryption MacieServiceStatement Prevents the deletion and modification to AWS security services Macie"},{"location":"sample-configurations/standard/authn-authz/#quarantine","title":"Quarantine","text":"<p>The quarantine policy is attached to an account to \u2018quarantine\u2019 it - to prevent any AWS operation from taking place. This is useful in the case of an account with credentials which are believed to have been compromised. This policy is also applied to new accounts upon creation. After the installation of guardrails by LZA, it is removed. In the meantime, it prevents all AWS control plane operations except by principals required to deploy guardrails.</p> Policy Statement ID (SID) Description DenyAllAWSServicesExceptBreakglassRoles Blanket denial on all AWS control plane operations for all non-breakglass roles"},{"location":"sample-configurations/standard/authn-authz/#scp-protection","title":"SCP Protection","text":"<p>SCPs are protected from changes by enabling the scpRevertChangesConfig key in the security-config.yaml configuration file. This configuration property will monitor for manual changes to SCPs and revert them. This is enabled by default in the sample configuration.</p>"},{"location":"sample-configurations/standard/logging-monitoring/","title":"Logging and Monitoring","text":""},{"location":"sample-configurations/standard/logging-monitoring/#overview","title":"Overview","text":"<p>The sample configuration files for LZA introduce a centralized logging pattern to capture cloud audit logs, security logs, and CloudWatch logs (which can be used to capture and centralize system and application logs).</p> <p></p>"},{"location":"sample-configurations/standard/logging-monitoring/#cloudtrail","title":"CloudTrail","text":"<p>The AWS CloudTrail service provides a comprehensive log of control plane and data plane operations (audit history) of all actions taken against most AWS services, including users logging into accounts. As discussed previously, the recommendation is to deploy LZA with Control Tower. In this case Control Tower enables and enforces organization-wide CloudTrail to capture and centralize all cloud audit logs.</p>"},{"location":"sample-configurations/standard/logging-monitoring/#vpc-flow-logs","title":"VPC Flow Logs","text":"<p>VPC Flow Logs capture information about the IP traffic going to and from network interfaces in a VPC such as source and destination IPs, protocol, ports, and success/failure of the flow. The network-config.yaml configuration file enables ALL (i.e. both accepted and rejected traffic) logs for all VPCs in all accounts to a local CloudWatch log group. It is important to use custom flow log formats to ensure all fields are captured as important fields are not part of the basic format. More details about VPC Flow Logs are available here. It should be noted that certain categories of network flows are not captured, including traffic to and from the instance metadata service (<code>169.254.169.254</code>), and DNS traffic with an Amazon VPC DNS resolver. DNS logs are available by configuring Route 53 Resolver query logs.</p>"},{"location":"sample-configurations/standard/logging-monitoring/#guardduty","title":"GuardDuty","text":"<p>Amazon GuardDuty is a cloud native threat detection and Intrusion Detection Service (IDS) that continuously monitors for malicious activity and unauthorized behavior to protect your AWS accounts and workloads. The service uses machine learning, anomaly detection, and integrated threat intelligence to identify and prioritize potential threats. GuardDuty uses a number of data sources including VPC Flow Logs, DNS logs, CloudTrail logs and several threat feeds. Amazon GuardDuty is enabled in the security-config.yaml sample configuration file.</p>"},{"location":"sample-configurations/standard/logging-monitoring/#config","title":"Config","text":"<p>AWS Config provides a detailed view of the resources associated with each account in the AWS Organization, including how they are configured, how they are related to one another, and how the configurations have changed over time. Resources can be evaluated on the basis of their compliance with Config Rules - for example, a Config Rule might continually examine EBS volumes and check that they are encrypted. Config is enabled at the organization level in the security-config.yaml configuration file - this provides an overall view of the compliance status of all resources across the organization. The AWS Config multi-account multi-region data aggregation capability has been located in both the Organization Management account and the Security account.</p>"},{"location":"sample-configurations/standard/logging-monitoring/#cloudwatch-logs","title":"CloudWatch Logs","text":"<p>CloudWatch Logs is the AWS-managed log aggregation service. It is used to monitor, store, and access log files from EC2 instances, AWS CloudTrail, Route 53, and other sources. LZA has a log replication job that stores your CloudWatch Logs in a centralized S3 bucket in the Log Archive account. This workflow is explained in more detail below:</p> <p></p> <ol> <li>A CloudWatch log group update workflow runs during the Logging stage of the pipeline. A CloudFormation custom resource invokes a Lambda function that updates existing log groups to enable encryption using the account-level CloudWatch AWS KMS key, apply a subscription filter, and increase log retention if it's less than the solution's configured log retention period. The destination for the subscription filter is an Amazon Kinesis Data Stream deployed to the Log Archive account.</li> <li>An EventBridge rule monitors for new CloudWatch log groups created in core and workload accounts.</li> <li>When new log groups are created, the EventBridge rule invokes a Lambda function that updates the log group with the CloudWatch AWS KMS key, subscription filter, and configured log retention period. The destination for the subscription filter is the Kinesis Data Stream deployed to the Log Archive account.</li> <li>Log groups stream their logs to the Kinesis Data Stream. The data stream is encrypted at rest with the replication AWS KMS key.</li> <li>A delivery stream is configured with the Kinesis Data Stream and Kinesis Data Firehose, allowing the logs to be transformed and replicated to Amazon S3.</li> <li>The destination of the Kinesis Data Firehose delivery stream is the <code>aws-accelerator-central-logs</code> Amazon S3 bucket. This bucket is encrypted at rest with the central logging AWS KMS key. In addition, the <code>aws-accelerator-s3-access-logs</code> and <code>aws-accelerator-elb-access-logs</code> buckets are encrypted at rest with Amazon S3-managed server-side encryption (SSE-S3) because these services don't support customer-managed AWS KMS keys. Logs delivered to the <code>aws-accelerator-elb-access-logs</code> bucket replicate to the central logs bucket with Amazon S3 replication.</li> </ol>"},{"location":"sample-configurations/standard/logging-monitoring/#security-hub","title":"Security Hub","text":"<p>The primary dashboard for Operators to assess the security posture of the AWS footprint is the centralized AWS Security Hub service. This is enabled in the security-config.yaml configuration file. Security Hub needs to be configured to aggregate findings from Amazon GuardDuty, Amazon Macie, AWS Config, Systems Manager, Firewall Manager, Amazon Detective, Amazon Inspector and IAM Access Analyzers. Events from security integrations are correlated and displayed on the Security Hub dashboard as \u2018findings\u2019 with a severity level (informational, low, medium, high, critical).</p>"},{"location":"sample-configurations/standard/logging-monitoring/#systems-manager-session-manager-and-fleet-manager","title":"Systems Manager Session Manager and Fleet Manager","text":"<p>AWS Systems Manager Session Manager is a fully managed AWS Systems Manager capability that lets you manage your Amazon Elastic Compute Cloud (EC2) instances, on-premises instances, and virtual machines (VMs) through an interactive one-click browser-based shell, AWS Command Line Interface (AWS CLI), or using a native RDP or SSH client. Session Manager provides secure and auditable instance management without the need to open inbound ports, maintain bastion hosts, or manage SSH keys. It makes it easy to comply with corporate policies that require controlled access to instances while providing end users with one-click cross-platform access to your managed instances.</p> <p>With Session Manager, customers can gain quick access to Windows and Linux instances through the AWS console or using their preferred clients. AWS Systems Manager Fleet Manager additionally allows connecting graphically to Windows desktops directly from the AWS console without the need for command line tools or RDSH/RDP clients.</p> <p>The LZA enforces session encryption and stores encrypted session log data in the centralized S3 bucket for auditing purposes. This is enabled in the global-config.yaml configuration file; optionally, session logging can also be enabled for CloudWatch Logs.</p>"},{"location":"sample-configurations/standard/logging-monitoring/#other-services","title":"Other Services","text":"<p>The following additional services are configured with their organization-wide administrative and visibility capabilities centralized to the Security Tooling account: Macie, Audit Manager, Access Analyzer. The following additional logging and reporting services are configured: CloudWatch Alarms, Cost and Usage Reports, ELB Access Logs.</p> <p>Amazon Detective can optionally be enabled 48 hours after an account is deployed. This is due to an underlying dependency on GuardDuty.</p>"},{"location":"sample-configurations/standard/networking/","title":"Networking","text":""},{"location":"sample-configurations/standard/networking/#overview","title":"Overview","text":"<p>The network-config.yaml sample configuration is intended to set up various centralized networking constructs that you can use to customize and build additional infrastructure. Specific IP address ranges; AWS Transit Gateway routing configurations; and advanced capabilities such as Amazon Route 53 Resolver, Amazon VPC IP Address Manager, and AWS Network Firewall likely require additional customization. The solution doesn't deploy these configuration items as default.</p>"},{"location":"sample-configurations/standard/networking/#architecture","title":"Architecture","text":"<ol> <li> <p>This solution offers optional hybrid connectivity with AWS Direct Connect to an on-premises data center. AWS Site-to-Site VPN (not depicted) is another option for hybrid connectivity. You can choose to deploy this infrastructure for hybrid connectivity to your AWS environment. The Direct Connect Gateway (or AWS VPN connection) is associated with a central AWS Transit Gateway, which allows communication between your on-premises network and cloud network.</p> </li> <li> <p>The Inspection VPC provides a central point for deep packet inspection. Optionally, you can use this VPC to centrally manage Network Firewall or third-party intrusion detection system/intrusion prevention system (IDS/IPS) appliances<sup>1</sup>. You can also use a Gateway Load Balancer for scalability and high availability of your third-party appliances. The Gateway Load Balancer isn't required for AWS Network Firewall deployments.</p> <p>We designed the Inspection VPC generically, and you might require additional configuration if using third-party appliances. For example, a best practice when using Gateway Load Balancer is to separate the load balancer subnet and endpoint subnet so that you can manage network access control lists (ACLs) independently from one another. For similar reasons, you might also want to separate your appliances\u2019 management and data network interfaces into separate subnets.</p> </li> <li> <p>When you design VPC endpoints in a centralized pattern, you can access multiple VPC endpoints in your environment from a central Endpoints VPC<sup>2</sup>. This can help you save on your cost and management overhead of deploying interface endpoints to multiple workload VPCs. This solution deploys constructs for managing the centralization of these endpoints and their dependencies (for example, Route 53 private hosted zones). We provide more information about this pattern in Centralized access to VPC private endpoints.</p> </li> <li> <p>A central Transit Gateway provides a virtual router that allows you to attach multiple Amazon VPCs and hybrid network connections in a single place. You can use this in combination with routing patterns through Transit Gateway route tables to achieve network isolation, centralized inspection, and other strategies required for your compliance needs.</p> </li> <li> <p>Optionally, you can use AWS Resource Access Manager (AWS RAM) to share networking resources to other core and workload OUs or accounts. For example, you can share Network Firewall policies created in the Network account with workload accounts that require fine-grained network access control and deep packet inspection within application VPCs.</p> </li> <li> <p>The Shared Services account and VPC provide commonly used patterns for organizations that have resources other than core network infrastructure that the organization needs to be share. Some examples include AWS Directory Service for Microsoft Active Directory (AWS Managed Microsoft AD), agile collaboration applications, and package or container repositories.</p> </li> <li> <p>An optional External Access VPC for shared applications, remote access (RDP/SSH) bastion hosts, or other resources that require public internet access is not included in the sample configuration and is depicted for illustration purposes only.</p> </li> <li> <p>Additional workload accounts can have application VPCs and Transit Gateway attachments deployed when provisioned by the solution. Deployment of network infrastructure in these workload accounts is dependent on your input to the network-config.yaml file.</p> </li> </ol> <ol> <li> <p>For more information on centralized inspection patterns, see the AWS Whitepaper Building a Scalable and Secure Multi-VPC AWS Network Infrastructure.\u00a0\u21a9</p> </li> <li> <p>Centralized endpoints aren't available in the GovCloud (US) Regions.\u00a0\u21a9</p> </li> </ol>"},{"location":"sample-configurations/standard/org-structure/","title":"Organization and Account Structure","text":""},{"location":"sample-configurations/standard/org-structure/#overview","title":"Overview","text":"<p>Landing Zone Accelerator uses AWS Accounts to enforce strong isolation between teams, business units and application functions. The sections below discuss the account design, the sample configuration files create through, AWS Control Tower or AWS Organizations.</p>"},{"location":"sample-configurations/standard/org-structure/#organization-structure","title":"Organization structure","text":"<p>The Landing Zone Accelerator includes the following default AWS organization and account structure.</p> <p>Note: the AWS account structure is strictly a control plane concept - nothing about this structure implies anything about the network architecture or network flows.</p> <p></p>"},{"location":"sample-configurations/standard/org-structure/#organization-management-root-aws-account","title":"Organization Management (root) AWS Account","text":"<p>The AWS Organization resides in the Organization Management (root) AWS account and is traditionally an organization's first AWS account. This account is not used for workloads - it functions primarily as a billing aggregator, and a gateway to the entire cloud footprint for high-trust principals. Additionally, the Organization Management account is where the automation engine or tooling is installed to automate the deployment of the LZA architecture and its security guardrails. As per the best practices resources described above, access to this account must be carefully governed.</p>"},{"location":"sample-configurations/standard/org-structure/#organizational-units","title":"Organizational Units","text":"<p>Underneath the root of the organization, Organizational Units (OU) (OUs) provide a mechanism for grouping accounts into logical collections. LZA makes use of OUs to enforce specific preventative controls through service control policies (SCPs), resource sharing across the organization through Resource Access Manager, and the ability to apply LZA configurations to groups of accounts e.g. a specific network pattern deployment.</p> <p>The Default sample configuration files OU structure is shown below:</p> <p></p> <p>For further details to help you plan your OU structure beyond the defaults provided by these configuration files, review the best practices for organizational units and also the recommendations on OUs and accounts.</p>"},{"location":"sample-configurations/standard/org-structure/#security-ou","title":"Security OU","text":"<p>The accounts in this OU are considered administrative in nature with access often restricted to IT security personnel. The sample configuration files add two accounts to this OU:</p> <ul> <li>Security Tooling account</li> <li>Log Archive account</li> </ul>"},{"location":"sample-configurations/standard/org-structure/#infrastructure-ou","title":"Infrastructure OU","text":"<p>The accounts in this OU are also considered administrative in nature with access often restricted to IT operations personnel. The sample configuration files add two accounts to this OU:</p> <ul> <li>Network account</li> <li>Shared Services account</li> </ul>"},{"location":"sample-configurations/standard/org-structure/#core-accounts","title":"Core Accounts","text":"<p>Core accounts can be defined as accounts that have special significance within the organization. Often these will provide functions shared across accounts within the organization, for example, centralized logging or network services.</p> <p>The Landing Zone Accelerator deployment enforces a subset of core accounts as defined in the mandatory accounts section of the implementation guide. The sample configuration adds additional core accounts for the specific functions listed below.</p> <p></p> <ul> <li>Management account</li> <li>Audit account (Security Tooling)</li> <li>Log Archive account</li> <li>Network account (Transit)</li> <li>Shared Services account</li> </ul>"},{"location":"sample-configurations/standard/org-structure/#workload-accounts","title":"Workload Accounts","text":"<p>Workload (Application) accounts are created on demand and placed into an appropriate OU in the organization structure. The purpose of workload accounts is to provide a secure and managed environment where project teams can use AWS resources. They provide an isolated control plane so that the actions of one team in one account cannot inadvertently affect the work of teams in other accounts.</p>"},{"location":"sample-configurations/standard/org-structure/#account-level-security-settings","title":"Account Level Security Settings","text":"<p>The LZA sample configuration files enable certain account-wide features on account creation. Namely, these include:</p> <ol> <li>S3 Public Access Block</li> <li>Default encryption of EBS volumes using a customer managed local account KMS key</li> <li>Tagging policy applied to the root OU via the organization-config.yaml taggingPolicies key. To help you define a tagging policy that meets your organizations see AWS tagging best practices. You can then amend the example tagging policy provided by these configuration files.</li> <li>Backup Policy applied to the root OU via the organization-config.yaml backupPolicies key.</li> </ol>"},{"location":"sample-configurations/standard/overview/","title":"Standard Configuration Overview","text":"<p>The Landing Zone Accelerator on AWS (LZA) is architected to align with AWS best practices and in conformance with multiple, global compliance frameworks. We recommend customers deploy AWS Control Tower as the foundational landing zone and enhance their landing zone capabilities with Landing Zone Accelerator. These complementary capabilities provides a comprehensive low-code solution across 35+ AWS services to manage and govern a multi-account environment built to support customers with highly-regulated workloads and complex compliance requirements. AWS Control Tower and Landing Zone Accelerator help you establish platform readiness with security, compliance, and operational capabilities.</p> <p>The configuration of LZA is managed through configuration files. Configuration files are written in YAML and define the AWS account and service configurations that meet specific compliance objectives. Using the configuration files, the solution helps users manage the lifecycle of their landing zone by setting up a baseline security architecture and automating common administrative and operational activities. This reduces the undifferentiated heavy lifting associated with building regulated environments on AWS, allowing organizations to focus on other high value concerns such as operating models, developer agility, and reducing costs.</p> <p>After deploying LZA and implementing these configuration files, you can:</p> <ul> <li>Configure additional functionality, guardrails, and security services such as AWS Config Managed Rules and AWS Security Hub</li> <li>Manage your foundational networking topology such as Amazon Virtual Private Cloud (Amazon VPC), AWS Transit Gateway, and AWS Network Firewall</li> <li>Generate additional workload accounts using the AWS Control Tower Account Factory or AWS Organizations</li> </ul> <p>This guide describes architectural considerations, design, and configuration steps for deploying the LZA sample configuration files.</p> <p>We recommend you familiarize yourself with the best practices for for managing your configuration files before making any chances to your environment.</p> <p>Note: This README is focused on the general sample configuration, not the industry specific configuration files which can be found here.</p>"},{"location":"sample-configurations/standard/overview/#design-principles","title":"Design Principles","text":"<ol> <li>Help customers implement a secure by design multi-account architecture aligned to AWS best practices</li> <li>Maximize agility, scalability, and availability while minimizing cost</li> <li>Enable the full capabilities of the AWS cloud</li> <li>Remove burden from customers by maintaining the deployment engine and configuration files to make use of the latest AWS innovations</li> <li>Offer customers flexibility to add capabilities and reconfigure the environment in an automated manner</li> <li>Reduce scope of impact by implementing logical separation between functions e.g. organizational networking, security, and workloads</li> </ol>"},{"location":"sample-configurations/standard/overview/#architecture-summary","title":"Architecture Summary","text":"<p>The architecture and best practices defined in these configuration files are heavily influenced by the AWS whitepaper Organizing Your AWS Environment Using Multiple Accounts and the AWS Security Reference Architecture. We highly recommend you read this guidance to understand the detail behind the architecture and its application in context of your organization's unique objectives.</p>"},{"location":"sample-configurations/standard/overview/#document-conventions","title":"Document Conventions","text":"<p>The following conventions are used throughout this document.</p>"},{"location":"sample-configurations/standard/overview/#aws-account-numbers","title":"AWS Account Numbers","text":"<p>AWS account numbers are decimal-digit pseudorandom identifiers with 12 digits (e.g. <code>111122223333</code>). This document will use the convention that an AWS Organization Management (root) account has the account ID <code>123456789012</code>, and child accounts are represented by <code>111122223333</code>, <code>444455556666</code>, etc. For example the following ARN would refer to a VPC subnet in the <code>us-east-1</code> region in the Organization Management (root) account:</p> <pre><code>arn:aws:ec2:us-east-1:123456789012:subnet/subnet-0e9801d129EXAMPLE\n</code></pre>"},{"location":"sample-configurations/standard/overview/#json-annotation","title":"JSON Annotation","text":"<p>Throughout the document, JSON snippets may be annotated with comments (starting with <code>//</code>). The JSON language itself does not define comments as part of the specification; these must be removed prior to use in most situations, including the AWS Console and APIs. For example:</p> <pre><code>{\n    \"Effect\": \"Allow\",\n    \"Principal\": {\n    \"AWS\": \"arn:aws:iam::123456789012:root\" // Trust the Organization Management account\n    },\n    \"Action\": \"sts:AssumeRole\"\n}\n</code></pre> <p>The above is not valid JSON without first removing the comment on the fourth line.</p>"},{"location":"sample-configurations/standard/overview/#ip-addresses","title":"IP Addresses","text":"<p>The sample network configuration file may make use of RFC1918 addresses (e.g. <code>10.1.0.0/16</code>) and RFC6598 (e.g. <code>100.96.250.0/23</code>) for various networks; these will be labeled accordingly. Any specific range or IP shown is purely for illustration purposes only.</p>"},{"location":"sample-configurations/standard/overview/#preventative-controls","title":"Preventative Controls","text":"<p>This sample configuration leverages Service Control Policies (SCPs), a feature of AWS Organizations, to implement scalable preventative controls across multi-account environments. The current design assumes that AWS Control Tower is deployed without its built-in region deny capabilities. For organizations requiring the ability to restrict operations in governed regions, we recommend creating a custom region deny policy and incorporating it into one of the existing Service Control Policies.</p> <p>This approach offers greater flexibility and granular control over regional access, while maintaining the robust governance framework provided by AWS Organizations. By tailoring the region deny policy to your specific needs, you can effectively manage access across your multi-account structure, ensuring compliance with your organization's security and operational requirements.</p>"},{"location":"sample-configurations/standard/overview/#customer-naming","title":"Customer Naming","text":"<p>This document will make no reference to specific AWS customers. Where naming is required (e.g. in domain names), this document will use a placeholder name as needed; e.g. <code>example.com</code>.</p>"},{"location":"user-guide/","title":"User Guide","text":"<p>This section contains architectural details and configuration references for the Landing Zone Accelerator solution.</p> <p>Subpages</p> <ul> <li>Services, Features, and Configuration References</li> <li>Centralized Logging</li> <li>Security Hub Findings</li> </ul> <p>See also</p> <ul> <li>Implementation Guide - Architecture Details</li> <li>Implementation Guide - Use the solution</li> </ul>"},{"location":"user-guide/config/","title":"Included Services, Features, and Configuration References","text":"<p>The latest version of our configuration reference is hosted here: Latest TypeDocs.</p> <p>Direct links to specific service configuration references are included in the following sections.</p> Documentation for previous releases <p>Please see TypeDocs for a full list of our versioned TypeDoc configuration references.</p>"},{"location":"user-guide/config/#account-configuration","title":"Account Configuration","text":"<p>Used to manage all of the AWS accounts within the AWS Organization. Adding a new account configuration to accounts-config.yaml will invoke the account creation process from Landing Zone Accelerator on AWS.</p> Service / Feature Resource Base Configuration Service / Feature Configuration Details AWS Accounts Account AccountsConfig AccountConfig / GovCloudAccountConfig Define commercial or GovCloud (US) accounts to be deployed by the accelerator."},{"location":"user-guide/config/#global-configuration","title":"Global Configuration","text":"<p>Used to manage all of the global properties that can be inherited across the AWS Organization. Defined in global-config.yaml.</p> Service / Feature Resource Base Configuration Service / Feature Configuration Details AWS Backup Backup Vaults GlobalConfig BackupConfig Define AWS Backup Vaults that can be used to store backups in accounts across the AWS Organization. AWS Budgets Budget Reports GlobalConfig / ReportConfig BudgetReportConfig Define Budget report configurations for account(s) and/or organizational unit(s). AWS CloudTrail Organization and Account Trails GlobalConfig / LoggingConfig CloudTrailConfig When specified, Organization and/or account-level trails are deployed. Amazon CloudWatch Log Group Dynamic Partitioning GlobalConfig / LoggingConfig CloudWatchLogsConfig Custom partition values for CloudWatch Log Groups sent to centralized logging S3 bucket. AWS Control Tower Control Tower GlobalConfig [ControlTowerConfig]../typedocs/latest//packagesawsaccelerator_config_lib_models_global_config.IControlTowerConfig.html) It is recommended that AWS Control Tower is enabled. When enabled, the accelerator will deploy AWS Control Tower in the desired home region for your environment. If AWS Control Tower is already available in the home region of your environment prior to installing the accelerator, the accelerator will integrate with resources and guardrails deployed by AWS Control Tower. AWS Control Tower Control Tower GlobalConfig / [ControlTowerConfig]../typedocs/latest//packagesawsaccelerator_config_lib_models_global_config.IControlTowerConfig.html) ControlTowerLandingZoneConfig Define AWS Control Tower LandingZone configuration. When defined, the accelerator will manage AWS Control Tower LandingZone. AWS Control Tower Control Tower Controls GlobalConfig / [ControlTowerConfig]../typedocs/latest//packagesawsaccelerator_config_lib_models_global_config.IControlTowerConfig.html) ControlTowerControlConfig Define AWS Control Tower controls to be deployed into organizational unit(s). AWS Cost and Usage Cost and Usage Report GlobalConfig / ReportConfig CostAndUsageReportConfig Define a global Cost and Usage report configuration for the AWS Organization. AWS Regions Enabled Regions GlobalConfig GlobalConfig.enabledRegions Define one or more AWS Regions for the solution to manage. Amazon S3 Lifecycle Rules GlobalConfig / LoggingConfig AccessLogBucketConfig / CentralLogBucketConfig Define global lifecycle rules for S3 access log buckets and the central log bucket deployed by the accelerator. AWS Systems Manager Session Manager Session Manager logging configuration GlobalConfig / LoggingConfig SessionManagerConfig Define global logging configuration settings for Session Manager. AWS Systems Manager Parameter Store GlobalConfig SsmParametersConfig Define parameters to be stored in SSM Parameter Store. AWS SNS Topics SNS Topics Configuration GlobalConfig SnsTopicConfig Define SNS topics for notifications. AWS Tags Tags Configuration GlobalConfig GlobalConfig.tags Define tags to apply to Landing Zone Accelerator created resources."},{"location":"user-guide/config/#identity-and-access-management-iam-configuration","title":"Identity and Access Management (IAM) Configuration","text":"<p>Used to manage all of the IAM resources across the AWS Organization. Defined in iam-config.yaml.</p> Service / Feature Resource Base Configuration Service / Feature Configuration Details AWS IAM Users IamConfig UserSetConfig Define IAM users to be deployed to specified account(s) and/or organizational unit(s). AWS IAM Groups IamConfig GroupSetConfig Define IAM groups to be deployed to specified account(s) and/or organizational unit(s). AWS IAM Policies IamConfig PolicySetConfig Define customer-managed IAM policies to be deployed to specified account(s) and/or organizational unit(s). AWS IAM Roles IamConfig RoleSetConfig Define customer-managed IAM roles to be deployed to specified account(s) and/or organizational unit(s). AWS IAM SAML identity providers IamConfig SamlProviderConfig Define a SAML identity provider to allow federated IAM access to the AWS Organization. AWS IAM Identity Center Permission sets IamConfig IdentityCenterConfig Define IAM Identity Center (formerly AWS SSO) permission sets and assignments. AWS Managed Microsoft AD Managed directory IamConfig ManagedActiveDirectoryConfig Define a Managed Microsoft AD directory."},{"location":"user-guide/config/#network-configuration","title":"Network Configuration","text":"<p>Used to manage and implement network resources to establish a WAN/LAN architecture to support cloud operations and application workloads in AWS. Defined in network-config.yaml.</p> Service / Feature Resource Base Configuration Service / Feature Configuration Details Delete Default Amazon VPC Default VPC NetworkConfig DefaultVpcsConfig If enabled, deletes the default VPC in each account and region managed by the accelerator. AWS Direct Connect Gateways, virtual interfaces, and gateway associations NetworkConfig DxGatewayConfig Define Direct Connect gateways, virtual interfaces, and Direct Connect Gateway associations. Amazon Elastic Load Balancing Gateway Load Balancers, endpoint services, and endpoints NetworkConfig / CentralNetworkServicesConfig GwlbConfig Define a centrally-managed Gateway Load Balancer with an associated VPC endpoint service. Define Gateway Load Balancer endpoints that consume the service, allowing for deep packet inspection of workloads. AWS Network Firewall Network Firewalls, policies, and rule groups NetworkConfig / CentralNetworkServicesConfig NfwConfig Define centrally-managed firewall rule groups and policies. Define Network Firewall endpoints that consume the policies, allowing for deep packet inspection of workloads. Amazon Route 53 Resolver Resolver endpoints, rules, DNS firewall rule groups, and query logging configurations NetworkConfig / CentralNetworkServicesConfig ResolverConfig Define centrally-managed Resolver endpoints, Resolver rules, DNS firewall rule groups, and query logging configurations. DNS firewall rule groups, Resolver rules, and query logging configurations can be associated to VPCs defined in VpcConfig / VpcTemplatesConfig. AWS Site-to-Site VPN Customer gateways and VPN connections NetworkConfig CustomerGatewayConfig Define Customer gateways and VPN connections that terminate on Transit Gateways or Virtual Private Gateways. AWS Transit Gateway Transit Gateways and Transit Gateway route tables NetworkConfig TransitGatewayConfig Define Transit Gateways to deploy to a specified account and region in the AWS Organization. AWS Transit Gateway Transit Gateway peering connections NetworkConfig TransitGatewayPeeringConfig Create Transit Gateway peering connections between two Transit Gateways defined in TransitGatewayConfig. Amazon VPC Customer-managed prefix lists NetworkConfig PrefixListConfig Define customer-managed prefix lists to deploy to account(s) and region(s) in the AWS Organization. Prefix lists can be referenced in place of CIDR ranges in subnet route tables, security groups, and Transit Gateway route tables. Amazon VPC DHCP options sets NetworkConfig DhcpOptsConfig Define custom DHCP options sets to deploy to account(s) and region(s) in the AWS Organization. DHCP options sets can be used by VPCs defined in VpcConfig / VpcTemplatesConfig. Amazon VPC Flow Logs (global) NetworkConfig VpcFlowLogsConfig Define a global VPC flow log configuration for VPCs deployed by the accelerator. VPC-specific flow logs can also be created in VpcConfig / VpcTemplatesConfig. Amazon VPC VPCs, subnets, security groups, NACLs, route tables, NAT Gateways, and VPC endpoints NetworkConfig VpcConfig Define VPCs to deploy to a specified account and region in the AWS Organization. Amazon VPC VPC endpoint policies NetworkConfig EndpointPolicyConfig Define custom VPC endpoint policies to deploy to account(s) and region(s) in the AWS Organization. Endpoint policies can be used by interface endpoints and/or gateway endpoints defined in VpcConfig / VpcTemplatesConfig. Amazon VPC VPC peering connections NetworkConfig VpcPeeringConfig Create a peering connection between two VPCs defined in VpcConfig. NOTE: Not supported with VPCs deployed using VpcTemplatesConfig. Amazon VPC IP Address Manager (IPAM) IPAM pools and scopes NetworkConfig / CentralNetworkServicesConfig IpamConfig Enable IPAM delegated administrator and configuration settings for IPAM pools and scopes. NOTE: IPAM is required for VPCs and subnets configured to use dynamic IPAM CIDR allocations. Amazon VPC Templates VPCs, subnets, security groups, NACLs, route tables, NAT Gateways, and VPC endpoints NetworkConfig VpcTemplatesConfig Deploys a standard-sized VPC to multiple defined account(s) and/or organizational unit(s)."},{"location":"user-guide/config/#aws-organizations-configuration","title":"AWS Organizations Configuration","text":"<p>Used to manage organizational units and policies in the AWS Organization. Defined in organization-config.yaml.</p> Service / Feature Resource Base Configuration Service / Feature Configuration Details AWS Account Quarantine Quarantine OrganizationConfig QuarantineNewAccountsConfig If enabled, a Service Control Policy (SCP) is applied to newly-created accounts that denies all API actions from principles outside of the accelerator. This SCP is stripped from the new account when the accelerator completes resource provisioning for the new account. AWS Organizations Backup Policies OrganizationConfig BackupPolicyConfig Define organizational backup policies to be deployed to account(s) and/or organizational unit(s). AWS Organizations Organizational Units OrganizationConfig OrganizationalUnitConfig Define organizational units (OUs) for the AWS Organization. AWS Organizations Service Control Policies (SCPs) OrganizationConfig ServiceControlPolicyConfig Define organizational service control policies to be deployed to account(s) and/or organizational unit(s). AWS Organizations Tag Policies OrganizationConfig TaggingPolicyConfig Define organizational tag policies to be deployed to account(s) and/or organizational unit(s)."},{"location":"user-guide/config/#security-configuration","title":"Security Configuration","text":"<p>Used to manage configuration of AWS security services. Defined in security-config.yaml.</p> Service / Feature Resource Base Configuration Service / Feature Configuration Details AWS Audit Manager Audit Manager SecurityConfig / CentralSecurityServicesConfig AuditManagerConfig Enable Audit Manager delegated administrator and configuration settings. Amazon CloudWatch Metrics, Alarms, and Log Groups SecurityConfig CloudWatchConfig Define CloudWatch metrics, alarms, and log groups to deploy into account(s) and/or organizational unit(s). You can also import existing log groups into your configuration. AWS Config Config Recorder, Delivery Channel, Rules, and Remediations SecurityConfig AwsConfig Define an AWS Config Recorder, Delivery Channel, and custom and/or managed rule sets to deploy across the AWS Organization. Amazon Detective Detective SecurityConfig / CentralSecurityServicesConfig DetectiveConfig Enable Detective delegated administrator and configuration settings. Note: Requires Amazon GuardDuty to be enabled for at least 48 hours. Amazon EBS Default Volume Encryption SecurityConfig / CentralSecurityServicesConfig EbsDefaultVolumeEncryptionConfig Enable EBS default volume encryption across the AWS Organization. Amazon GuardDuty GuardDuty SecurityConfig / CentralSecurityServicesConfig GuardDutyConfig Enable GuardDuty delegated administrator and configuration settings. AWS IAM Access Analyzer SecurityConfig AccessAnalyzerConfig If enabled, IAM Access Analyzer analyzes policies and reports a list of findings for resources that grant public or cross-account access from outside your AWS Organizations in the IAM console and through APIs. AWS IAM Password Policy SecurityConfig IamPasswordPolicyConfig Define a password policy for IAM users in the AWS Organization. AWS KMS Customer-Managed Keys SecurityConfig KeyManagementServiceConfig Define customer-managed KMS keys to be deployed to account(s) and/or organizational unit(s). Amazon Macie Macie SecurityConfig / CentralSecurityServicesConfig MacieConfig Enable Macie delegated administrator and configuration settings. Amazon S3 S3 Public Access Block SecurityConfig / CentralSecurityServicesConfig S3PublicAccessBlockConfig Enable S3 public access block setting across the AWS Organization. AWS Security Hub Security Hub SecurityConfig / CentralSecurityServicesConfig SecurityHubConfig Enable Security Hub delegated administrator and configuration settings. Amazon SNS Subscriptions SecurityConfig / CentralSecurityServicesConfig SnsSubscriptionConfig Configure email subscriptions for security-related SNS notifications. NOTE: DEPRECATED Use SnsTopicConfig in the global configuration instead. AWS Systems Manager Automation Automation Documents SecurityConfig / CentralSecurityServicesConfig SsmAutomationConfig Define SSM Automation Documents to be deployed to account(s) and/or organizational unit(s). Resource Policy Enforcement Resource Policy Enforcement Config SecurityConfig ResourcePolicyEnforcementConfig Define compliance check and remediation for resource-based policy to be deployed to account(s) and/or organization unit, which will enforce resource policy for all applicable resources in the account and/or OU."},{"location":"user-guide/config/#customization-configuration","title":"Customization Configuration","text":"<p>Used to manage configuration of custom applications and CloudFormation stacks. Defined in the optional file customizations-config.yaml.</p> Service / Feature Resource Base Configuration Service / Feature Configuration Details AWS CloudFormation Stacks CustomizationsConfig / CustomizationConfig CloudFormationStackConfig Define custom CloudFormation Stacks. AWS CloudFormation StackSets CustomizationsConfig / CustomizationConfig CloudFormationStackSetConfig Define custom CloudFormation Stacksets. Amazon Elastic Load Balancing Application Load Balancers CustomizationsConfig / AppConfigItem ApplicationLoadBalancerConfig Define an Application Load Balancer to be used for a custom application. Amazon Elastic Load Balancing Network Load Balancers CustomizationsConfig / AppConfigItem NetworkLoadBalancerConfig Define a Network Load Balancer to be used for a custom application. Amazon Elastic Load Balancing Target Groups CustomizationsConfig / AppConfigItem TargetGroupItemConfig Define a Target Group to be used with an Elastic Load Balancer. Amazon EC2 Autoscaling Groups CustomizationsConfig / AppConfigItem AutoScalingConfig Define an autoscaling group to be used for a custom application. Amazon EC2 Launch Template CustomizationsConfig / AppConfigItem LaunchTemplateConfig Define a launch template to be used for a custom application. Amazon EC2 Next-generation firewalls (standalone or autoscaling) and firewall management appliances CustomizationsConfig Ec2FirewallConfig Define third-party EC2-based firewall appliances. AWS Service Catalog Portfolios, products, and shares CustomizationsConfig / CustomizationConfig PortfolioConfig Define Service Catalog portfolios, products, and grant access permissions. You may also share portfolios to other accounts and OUs."},{"location":"user-guide/config/#other-services-and-features","title":"Other Services and Features","text":"<p>Other mandatory and non-configurable services/features deployed by the solution are described in the Architecture overview and Architecture details section of the solution Implementation Guide.</p>"},{"location":"user-guide/logging/","title":"Centralized Logging","text":"<p>The Landing Zone Accelerator Centralized Logging solution provides the ability to consolidate and manage log files from various sources into a Centralized Logging Account. This enables users to consolidate logs such as audit logs for access, configuration changes, and billing events. You can also collect Amazon CloudWatch Logs from multiple accounts and AWS Regions. The following sections discuss the types of logs that are centralized and the mechanisms used by the accelerator to centralize them.</p>"},{"location":"user-guide/logging/#supported-log-types","title":"Supported Log Types","text":"<ul> <li>ELB Access Logs</li> <li>VPC Flow Logs</li> <li>Macie Reports</li> <li>Cost and Usage Reports</li> <li>Config History</li> <li>Config Snapshots</li> <li>GuardDuty Findings</li> <li>CloudWatch Logs</li> <li>CloudTrail Digest</li> <li>CloudTrail Insights</li> <li>CloudTrail Logs</li> <li>S3 Server Access Logs</li> <li>SSM Inventory</li> <li>SSM Session Manager</li> <li>Security Hub Findings</li> </ul>"},{"location":"user-guide/logging/#log-centralization-methods","title":"Log Centralization Methods","text":"<ul> <li>S3 Replication - Log types that do not support service-native central logging methods or logging to CloudWatch Logs are stored in account-specific S3 buckets. These buckets are configured with an S3 replication rule to replicate logs to centralized logging S3 bucket in the central logging account.</li> <li>Service-Native - The AWS Service writes directly to the centralized logging bucket in the central logging account.</li> <li>Log Streaming - Some services do not support native centralized logging capability and do not allow writing directly to S3 in a centralized account. In order to enable this functionality, the accelerator utilizes CloudWatch and native log forwarding capabilities via the following workflow:</li> <li>Log Group is created in CloudWatch.</li> <li>A subscription filter is added to the CloudWatch Log Group.</li> <li>The subscription filter points to a Log Destination.</li> <li>The Log Destination is a region specific Kinesis Stream in the Central Logging Account.<ul> <li>Each enabled region has its own Kinesis Stream in the Central Logging Account.</li> </ul> </li> <li>The Kinesis Streams are forwarded into a Kinesis Firehose in the same specific region.</li> <li>The logs are processed by a Lambda function and written to the Central Logging S3 Bucket in the Home Region.</li> <li>Not Replicated - Log types that are not replicated to the centralized logging S3 bucket.</li> </ul> Bucket Type Bucket Name Purpose Centralized Logging Bucket aws-accelerator-central-logs-{account#}-{region} Stores all Landing Zone Accelerator centralized logs that have been enabled via the accelerator. This mechanism allows the solution to store a combined set of logs in a single account and single region. ELB Access Logs aws-accelerator-elb-access-logs-{account#}-{region} Stores ELB Access logs in the centralized logging account on a per region basis. S3 Access Logs aws-accelerator-s3-access-logs-{account#}-{region} Stores S3 Access logs on a per account/region basis. Log Type S3 Path Example Supported Centralization Methods ELB {account#}/{region}/* s3://aws-accelerator-elb-access-logs-123456789016-us-east-1/{account#}/{region}/*.log.gz S3 Replication VPC Flow Logs<sup>1</sup> vpc-flow-logs/AWSLogs/{account#}/vpcflowlogs/{region}/{year}/{month}/{day}/* s3://aws-accelerator-central-logs-123456789016-us-east-1/vpc-flow-logs/AWSLogs/123456789016/vpcflowlogs/us-east-1/2023/04/14/*.log.gz Log Streaming / S3 Replication Macie Reports macie/{account#}/AWSLogs/{account#}/Macie/{region}/* s3://aws-accelerator-central-logs-123456789016-us-east-1/macie/123456789016/AWSLogs/123456789016/Macie/us-east-1/*.jsonl.gz Service-Native Cost and Usage Reports cur/{account#}/accelerator-cur/* s3://aws-accelerator-central-logs-123456789016-us-east-1/cur/123456789016/accelerator-cur/20220901-20221001/*.snappy.parquet S3 Replication Config History config/AWSLogs/{account#}/Config/{region}/{year}/{month}/{day}/ConfigHistory/* s3://aws-accelerator-central-logs-123456789016-us-east-1/AWSLogs/123456789016/Config/us-east-1/2023/4/10/ConfigHistory/*.json.gz Service-Native Config Snapshots config/AWSLogs/{account#}/Config/{region}/{year}/{month}/{day}/ConfigSnapshot/* s3://aws-accelerator-central-logs-123456789016-us-east-1/AWSLogs/123456789016/Config/us-east-1/2023/4/10/ConfigSnapshot/*.json.gz Service-Native GuardDuty guardduty/AWSLogs/{account#}/GuardDuty/region/{year}/{month}/{day}/* s3://aws-accelerator-central-logs-123456789016-us-east-1/guardduty/AWSLogs/123456789016/GuardDuty/us-east-1/2023/04/08/*.jsonl.gz Service-Native CloudWatch Logs CloudWatchLogs/{year}/{month}/{day}/{hour}/* s3://aws-accelerator-central-logs-123456789016-us-east-1/CloudWatchLogs/2023/04/17/14/*.parquet Log Streaming CloudTrail Organization Digest cloudtrail-organization/AWSLogs/{organizationId}/{account#}/CloudTrail-Digest/{region}/{year}/{month}/{day}/* s3://aws-accelerator-central-logs-123456789016-us-east-1/cloudtrail-organization/AWSLogs/o-abc12cdefg/123456789016/CloudTrail-Digest/us-east-1/2023/04/14/*.json.gz Service-Native CloudTrail Organization Insights cloudtrail-organization/AWSLogs/{organizationID}/{account#}/CloudTrail-Insight/* s3://aws-accelerator-central-logs-123456789016-us-east-1/cloudtrail-organization/AWSLogs/o-abc12cdefg/123456789016/CloudTrail-Insight/*.json.gz Service-Native CloudTrail Organization Logs<sup>1</sup> cloudtrail-organization/AWSLogs/{organizationId}/{account#}/CloudTrail/{region}/{year}/{month}/{day}/* s3://aws-accelerator-central-logs-123456789016-us-east-1/cloudtrail-organization/AWSLogs/o-abc12cdefg//123456789016/CloudTrail/us-east-1/2023/04/14/*.json.gz Log Streaming / Service-Native S3 Access Logs aws-accelerator-s3-access-logs-{account#}-{region}/* s3://aws-accelerator-s3-access-logs-123456789016-us-east-1/* Not Replicated SSM Inventory ssm-inventory/* s3://aws-accelerator-central-logs-123456789016-us-east-1/ssm-inventory/AWS:ComplianceSummary/accountid=123456789016/region=us-east-1/resourcetype=ManagedInstanceInventory/*.json Service-Native SSM Sessions Manager* session/{account#}/{region}/* s3://aws-accelerator-central-logs-123456789016-us-east-1/session/123456789016/us-east-1/*.log Log Streaming / Service-Native Security Hub CloudWatchLogs/{year}/{month}/{day}/* s3://aws-accelerator-central-logs-123456789016-us-east-1/CloudWatchLogs/2023/04/21/00/*.parquet Log Streaming <ol> <li> <p>These log types are only written to the documented S3 path when configured to store their logs in S3, otherwise they are stored in the CloudWatch Logs S3 path. You may configure dynamic partitioning of CloudWatch Logs if you would like these logs to be delivered to a custom S3 path.\u00a0\u21a9\u21a9</p> </li> </ol>"},{"location":"user-guide/securityhub-findings/","title":"Security Hub Findings","text":"<p>The Landing Zone Accelerator on AWS (LZA) solution includes a feature to enable AWS Security Hub, which provides a comprehensive view of the security state and helps you assess your environment against security standards and best practices. When deploying LZA, it is essential to review and address the Security Hub findings to ensure a secure environment based on your requirements. The following table provides guidance on AWS Security Hub findings that you may encounter during the deployment of LZA using sample configurations.</p> <p>Note</p> <p>You should regularly review and monitor new findings in AWS Security Hub, as your environment and workloads evolve over time. This guidance applies to the resources created and managed by the Landing Zone Accelerator on AWS solution. For other findings in your environment, it is recommend to follow the Security Hub controls reference.</p> ID Title Severity Guidance Account.1 Security contact information should be provided for an AWS account Medium This finding is generated when security contact information for an AWS account is not provided.  To add an alternate contact as a security contact to your AWS account, see Adding, changing, or removing alternate contacts in the AWS Billing and Cost Management User Guide. DynamoDB.4 DynamoDB tables should be present in a backup plan Medium When using the Landing Zone Accelerator on AWS solution, this finding includes the following Amazon DynamoDB tables with prefix <code>{ACCELERATOR_PREFIX}</code>:  - <code>{ACCELERATOR_PREFIX}</code>-PrepareStack-<code>{ACCOUNT_ID}</code>-<code>{REGION}</code>AcceleratorConfigTableXXXXX  - <code>{ACCELERATOR_PREFIX}</code>-PrepareStack-<code>{ACCOUNT_ID}</code>-<code>{REGION}</code>NewCTAccountsXXXX - <code>{ACCELERATOR_PREFIX}</code>-PrepareStack-<code>{ACCOUNT_ID}</code>-<code>{REGION}</code>-NewOrgAccountsXXXX  You can disregard this finding, as these DynamoDB tables are managed by LZA to store environment specific information. All these tables have point-in-time recovery enabled which automate backups, and may be needed for troubleshooting in rare cases. Deleting them will not impact LZA, as they will be repopulated during next pipeline execution. Alternatively, you can choose to suppress the finding for these resources. DynamoDB.6 DynamoDB tables should have deletion protection enabled Medium When using the Landing Zone Accelerator on AWS solution, this finding includes the following Amazon DynamoDB tables with prefix <code>{ACCELERATOR_PREFIX}</code>:  - <code>{ACCELERATOR_PREFIX}</code>-PrepareStack-<code>{ACCOUNT_ID}</code>-<code>{REGION}</code>AcceleratorConfigTableXXXXX  - <code>{ACCELERATOR_PREFIX}</code>-PrepareStack-<code>{ACCOUNT_ID}</code>-<code>{REGION}</code>NewCTAccountsXXXX  - <code>{ACCELERATOR_PREFIX}</code>-PrepareStack-<code>{ACCOUNT_ID}</code>-<code>{REGION}</code>-NewOrgAccountsXXXX  You can disregard this finding, as these DynamoDB tables are managed by LZA to store environment specific information. Deleting them will not impact LZA, as they will be repopulated during next pipeline execution. Alternatively, you can choose to suppress the finding for these resources. EC2.10 Amazon EC2 should be configured to use VPC endpoints that are created for the Amazon EC2 service Medium When using the Landing Zone Accelerator on AWS solution, this finding includes the following Amazon VPCs:  - Network-Inspection  - SharedServices-Main  You can disregard this finding, as these VPCs are configured to utilize centralized endpoints. AWS Security Hub does not conduct cross-account checks for VPCs that are shared across accounts. Alternatively, you can choose to suppress the finding for these resources. EC2.21 Network ACLs should not allow ingress from 0.0.0.0/0 to port 22 or port 3389 Medium When using the Landing Zone Accelerator on AWS solution, this finding includes following Amazon VPCs with network ACLs:  - Network-Endpoints  -  Network-Inspection  - SharedServices-Main  The LZA creates VPCs that is defined in the network-config.yaml file, and your VPCs automatically comes with a modifiable default network ACL that allows all inbound and outbound IPv4 traffic. You can implement additional NACL with specific rules by creating a custom network ACL and associate it with a subnet to allow or deny specific inbound or outbound traffic to address this finding.  To create custom Network ACLs with defined inbound and outbound rule, you can use add the following networkACL example in the VPCs defined in network-config.yaml configuration file:  <code>networkAcls:</code> \u00a0\u00a0\u00a0\u00a0 - <code>name: accelerator-nacl</code> <code>subnetAssociations:</code>\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 - <code>Subnet-A</code> <code>inboundRules</code>\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 - <code>rule: 200</code> <code>protocol: 6</code> <code>fromPort: 22</code> <code>action: allow</code> <code>source: &lt;CIDR RANGE&gt;</code> <code>outboundRules:</code>\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0- <code>rule: 200</code> <code>protocol: 6</code> <code>fromPort: 1024</code> <code>toPort: 65535</code> <code>action: allow</code> <code>destination: &lt;CIDR RANGE&gt;</code> EC2.23 Amazon EC2 Transit Gateways should not automatically accept VPC attachment requests High When using the Landing Zone Accelerator on AWS solution, this finding includes following AWS Transit Gateway named Network-Main.  The LZA uses <code>autoAcceptSharingAttachments: enable</code> features to shared out transit gateway (via Resource Access Manager) with only accounts  shared through <code>shareTargets</code> property in the AWS Organization. You can disregard this findings as the automatic acceptance of VPCs attachment request is only allowed for accounts present in the AWS Organization and defined in the <code>shareTargets</code> property of transit gateway. Alternatively, you can choose to suppress the finding for these resources. ECR.1 ECR private repositories should have image scanning configured High When using the Landing Zone Accelerator on AWS solution, this finding includes <code>{cdk-accel}</code>-container-assets-<code>{ACCOUNT_ID}</code>-<code>{REGION}</code> Amazon ECR.  During bootstrapping process with AWS Cloud Development Kit (CDK), the Amazon Elastic Container Registry (ECR) repository is automatically created to store docker images used by AWS CDK. You can disregard this finding, as this repository is not used by LZA for storing assets. Alternatively, you can choose to suppress this finding for these resources. ECR.3 ECR repositories should have at least one lifecycle policy configured Medium When using the Landing Zone Accelerator on AWS solution, this finding includes <code>{cdk-accel}</code>-container-assets-<code>{ACCOUNT_ID}</code>-<code>{REGION}</code> Amazon ECR.  During bootstrapping process with AWS Cloud Development Kit (CDK), the Amazon Elastic Container Registry (ECR) repository is automatically created to store docker images used by AWS CDK. You can disregard this finding, as this repository is not used by LZA for storing assets. Alternatively, you can choose to suppress this finding for these resources. ECR.5 ECR repositories should be encrypted with customer managed AWS KMS keys Medium When using the Landing Zone Accelerator on AWS solution, this finding includes <code>{cdk-accel}</code>-container-assets-<code>{ACCOUNT_ID}</code>-<code>{REGION}</code> Amazon ECR.  During bootstrapping process with AWS Cloud Development Kit (CDK), the Amazon Elastic Container Registry (ECR) repository is automatically created to store docker images used by AWS CDK. You can disregard this finding, as this repository is not used by LZA for storing assets. Alternatively, you can choose to suppress this finding for these resources. IAM.6 Hardware MFA should be enabled for the root user Critical This finding is generated when your AWS account is not configured to use a hardware multi-factor authentication (MFA) device to sign in with root user credentials.To add a hardware MFA device for the root user, see Enable a hardware MFA device for the AWS account root user (console) in the IAM User Guide IAM.9 MFA should be enabled for the root user Critical This finding is generated when your AWS account is not enabled to use a multi-factor authentication (MFA) device to sign in with root user credentials.  To enable MFA for the root user, see Activate MFA on the AWS account root user in the AWS Account Management Reference Guide IAM.18 Ensure a support role has been created to manage incidents with AWS Support Low This finding is generated when support role is not created to manage incidents with AWS Support.  To create the role for AWS Support access, you can use add  it to the role in the iam-config.yaml configuration file, as shown in the provided example:  <code>roleSets:</code>\u00a0\u00a0\u00a0\u00a0- <code>deploymentTargets:</code> <code>organizationalUnits:</code> \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 - <code>Root</code> <code>roles:</code> \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 - <code>name: &lt;ENTER THE ROLE NAME&gt;</code> <code>assumedBy:</code> \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 - <code>type: account</code> <code>principal: &lt;ENTER AWS ACCOUNT ID TO GRANT ACCESS&gt;</code> <code>policies:</code> <code>awsManaged:</code> \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0- <code>AWSSupportAccess</code> KMS.1 IAM customer managed policies should not allow decryption actions on all KMS keys Medium When using the Landing Zone Accelerator on AWS solution, this finding includes the following AWS IAM customer managed policies with prefix <code>{ACCELERATOR_PREFIX}</code>:  - <code>{ACCELERATOR_PREFIX}</code>-OperationsStack-<code>{ACCOUNT_ID}</code>-<code>{REGION}</code>-SsmSessionManagerSettingsSessionManagerPolicyXXXX  - <code>{ACCELERATOR_PREFIX}</code>-SessionManagerLogging  You can disregard this finding, as these IAM policies are managed by LZA to enable decryption operations on KMS keys. These policies have conditions that restrict their usage to the LZA generated alias of KMS keys, ensuring that the decryption actions are performed only within the specific account and region. Additionally, the usage of these policies is restricted to solution created resources and protected by service control policies in the member accounts. Alternatively, you can choose to suppress the finding for these resources. KMS.2 IAM principals should not have IAM inline policies that allow decryption actions on all KMS keys Medium When using the Landing Zone Accelerator on AWS solution, this finding includes the following AWS IAM principles with prefixes <code>{ACCELERATOR_PREFIX}</code>  and <code>{cdk-accel}</code>:  - <code>{ACCELERATOR_PREFIX}</code>-InstallerS-UpdatePipelineLambdaRoleXXXX (UpdatePipelineLambdaPolicy284ABC36) - <code>{cdk-accel}</code>-file-publishing-role-211125696757-us-east-1  - <code>{cdk-accel}</code>-deploy-role-211125696757-us-east-1  You can disregard this finding related to AWS IAM principles with the prefix <code>{ACCELERATOR_PREFIX}</code>, as these roles with inline polices are managed by LZA to enable decryption operations on KMS keys. These policies are used by lambda functions created by the solution and performs decryption actions only within the specific account and region adhering to the principle of least privilege.  For the roles related to the AWS Cloud Developmental Kit (CDK), enabling the <code>useManagementAccessRole</code> option in the <code>global-config.yaml</code> file modifies CDK operations to use the IAM role specified in the <code>managementAccountAccessRole</code> option rather than the default roles created by CDK. The default CDK roles will still be created but will be only used for initial cdk resources setup. This finding  guidance is mentioned in the CDK documentation. Therefore, you can disregard those roles.  Alternatively, you can choose to suppress the finding for these resources. Lambda.3 Lambda functions should be in a VPC Low When using the Landing Zone Accelerator on AWS solution, this finding includes AWS Lambda functions with the prefix <code>{ACCELERATOR_PREFIX}</code>.  You can disregard this finding, as these functions are created and managed by the LZA for infrastructure deployment, and solely used for communicating with AWS services. Alternatively, you can choose to suppress the finding for these resources. S3.6 S3 general purpose bucket policies should restrict access to other AWS accounts High When using the Landing Zone Accelerator on AWS solution, this finding includes the following Amazon S3 buckets with prefixes <code>{ACCELERATOR_PREFIX}</code> and <code>{cdk-accel}</code>:  - <code>{ACCELERATOR_PREFIX}</code>-central-logs-<code>{ACCOUNT_ID}</code>-<code>{REGION}</code>  - <code>{cdk-accel}</code>-assets-<code>{ACCOUNT_ID}</code>-<code>{REGION}</code>  You can disregard this finding, as these buckets are created and managed by the LZA and AWS Cloud Development Kit (CDK). <code>{ACCELERATOR_PREFIX}</code> bucket stores solution artifacts and environment logs, while <code>{cdk-accel}</code> bucket stores files during bootstrapping process with AWS CDK. These buckets contains resources policies with conditions that restrict their usage to only accounts in the organization with access to limited roles including <code>{ACCELERATOR_PREFIX}</code>,<code>{managementAccountAccessRole}</code> and <code>{cdk-accel}</code>. Additionally, the usage of these roles are protected by service control policies in the members accounts. Alternatively, you can choose to suppress the finding for these resources. S3.7 S3 general purpose buckets should use cross-Region replication Low When using the Landing Zone Accelerator on AWS solution, this finding includes Amazon S3 buckets with prefixes <code>{ACCELERATOR_PREFIX}</code> and <code>{cdk-accel}</code>.  You can disregard this finding, as <code>{ACCELERATOR_PREFIX}</code> bucket is created and managed by the LZA to store solution artifacts and environment logs. These buckets have versioning which keeps multiple variants of an object in the same s3 buckets to preserve, retrieve, and restore earlier versions of an object.  For the bucket related to <code>{cdk-accel}</code>, this bucket is automatically created for storing files during the bootstrapping process with AWS Cloud Development Kit (CDK). You can disregard this finding, as this bucket stores and manages  assets, templates, and metadata related to your CDK deployments.  Alternatively, you can choose to suppress this finding for these resources. S3.9 S3 general purpose buckets should have server access logging enabled Medium When using the Landing Zone Accelerator on AWS solution, this finding includes the following Amazon S3 buckets with prefixes <code>{ACCELERATOR_PREFIX}</code> and <code>{cdk-accel}</code> :  - <code>{ACCELERATOR_PREFIX}</code>-s3-access-logs-<code>{ACCOUNT_ID}</code>-<code>{REGION}</code>  - <code>{ACCELERATOR_PREFIX}</code>-s3-logs-<code>{ACCOUNT_ID}</code>-<code>{REGION}</code>  - <code>{ACCELERATOR_PREFIX}</code>-elb-access-logs-<code>{ACCOUNT_ID}</code>-<code>{REGION}</code> -  <code>{cdk-accel}</code>-assets-<code>{ACCOUNT_ID}</code>-<code>{REGION}</code>.You can disregard this finding for s3-access-logs, s3-logs and elb-access-logs buckets with prefix , <code>{ACCELERATOR_PREFIX}</code> as these are target logging buckets and do not require server access logging enabled.  For the buckets related to <code>{cdk-accel}</code>, this bucket is automatically created for storing files during the bootstrapping process with AWS Cloud Development Kit (CDK). You can disregard this finding, as this bucket stores and manages assets, templates, and metadata related to your CDK deployments.  Alternatively, you can choose to suppress the finding for these resources. S3.11 S3 general purpose buckets should have event notifications enabled Medium When using the Landing Zone Accelerator on AWS solution, this finding includes all Amazon S3 buckets with prefixes <code>{ACCELERATOR_PREFIX}</code> and <code>{cdk-accel}</code>.  You can disregard this finding, as these buckets are created and managed by the LZA and AWS Cloud Development Kit (CDK) to store solution artifacts and environment logs. These buckets have versioning which keeps multiple variants of an object in the same s3 buckets to preserve, retrieve, and restore earlier versions of an object. Alternatively, you can choose to suppress the finding for these resources. S3.15 S3 general purpose buckets should have Object Lock enabled Medium When using the Landing Zone Accelerator on AWS solution, this finding includes the Amazon S3 buckets with prefixes <code>{ACCELERATOR_PREFIX}</code> and <code>{cdk-accel}</code>.  You cannot enable object lockfor destination buckets <code>{ACCELERATOR_PREFIX}</code>-s3-access-logs-<code>{ACCOUNT-ID}</code>-<code>{REGION}</code>, <code>{ACCELERATOR_PREFIX}</code>-s3-logs-<code>{ACCOUNT-ID}</code>-<code>{REGION}</code>, <code>{ACCELERATOR_PREFIX}</code>-elb-access-logs-<code>{ACCOUNT-ID}</code>-<code>{REGION}</code>, used for server access logs.  You can disregard this finding for remaining buckets, as these buckets are created and managed by the LZA  and AWS Cloud Development Kit (CDK) to store solution artifacts and environment logs. These buckets have versioning which keeps multiple variants of an object in the same s3 buckets to preserve, retrieve, and restore earlier versions of an object. Alternatively, you can choose to suppress the finding for these resources. S3.17 S3 general purpose buckets should be encrypted at rest with AWS KMS keys Medium When using the Landing Zone Accelerator on AWS solution, this finding includes the following Amazon S3 buckets:  - <code>{ACCELERATOR_PREFIX}</code>-assets-logs-<code>{ACCOUNT_ID}</code>-<code>{REGION}</code>  - <code>{ACCELERATOR_PREFIX}</code>-s3-access-logs-<code>{ACCOUNT_ID}</code>-<code>{REGION}</code>  - <code>{ACCELERATOR_PREFIX}</code>-cur-<code>{ACCOUNT_ID}</code>-<code>{REGION}</code>  - <code>{ACCELERATOR_PREFIX}</code>-s3-logs-<code>{ACCOUNT_ID}</code>-<code>{REGION}</code>  You can disregard this finding, as these buckets are created and managed by the LZA to store solution artifacts and environment logs, and enabled server side encryption with Amazon S3 managed keys (SSE-S3). Additionally, default server-side encryption with AWS Key Management Service (AWS KMS) keys (SSE-KMS) is not supported for server access logging buckets. Alternatively, you can choose to suppress the finding for these resources. S3.20 S3 general purpose buckets should have MFA delete enabled Low When using the Landing Zone Accelerator on AWS solution, this finding includes the all Amazon S3 buckets with prefixes <code>{ACCELERATOR_PREFIX}</code> and <code>{cdk-accel}</code>.  You can disregard this finding, as these buckets are created and managed by the LZA and AWS Cloud Development Kit (CDK) to store solution artifacts and environment logs. These buckets have Lifecycle configurations setup , and you cannot use MFA delete for buckets with lifecycle configurations. Alternatively, you can choose to suppress the finding for these resources. StepFunctions.1 Step Functions state machines should have logging turned on Medium When using the Landing Zone Accelerator on AWS solution, this finding includes the following AWS Step Functions:  - CreateCTAccountsXXXX  - CreateOrganizationAccountsXXXX  You can disregard this finding, as these step functions are created and managed by the LZA to execute Lambda functions for account creation. These Lambda functions associated with Step Functions have enabled cloudwatch logs for monitoring and logging purposes.  Alternatively, you can choose to suppress the finding for these resources."}]}