// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`ActiveDirectoryConfiguration Construct(ActiveDirectoryConfiguration):  Snapshot Test 1`] = `
{
  "Parameters": {
    "SsmParameterValueawsserviceamiwindowslatestWindowsServer2016EnglishFullBaseC96584B6F00A464EAD1953AFF4B05118Parameter": {
      "Default": "/aws/service/ami-windows-latest/Windows_Server-2016-English-Full-Base",
      "Type": "AWS::SSM::Parameter::Value<String>",
    },
  },
  "Resources": {
    "ActiveDirectoryConfigurationAcceleratorManagedActiveDirectoryInstanceCDCB7E02": {
      "CreationPolicy": {
        "ResourceSignal": {
          "Count": 1,
          "Timeout": "PT30M",
        },
      },
      "Metadata": {
        "AWS::CloudFormation::Init": {
          "configSets": {
            "config": [
              "setup",
              "join",
              "installRDS",
              "createADConnectorUser",
              "configurePasswordPolicy",
              "finalize",
            ],
          },
          "configurePasswordPolicy": {
            "commands": {
              "a-set-password-policy": {
                "command": "powershell.exe -ExecutionPolicy RemoteSigned C:\\cfn\\scripts\\Configure-password-policy.ps1 -DomainAdminUser admin -DomainAdminPassword ((Get-SECSecretValue -SecretId adminPwdSecretArn).SecretString) -ComplexityEnabled:$True -LockoutDuration 00:30:00 -LockoutObservationWindow 00:30:00 -LockoutThreshold 6 -MaxPasswordAge:90.00:00:00 -MinPasswordAge:1.00:00:00 -MinPasswordLength:14 -PasswordHistoryCount:24 -ReversibleEncryptionEnabled:$false",
                "waitAfterCompletion": "0",
              },
            },
          },
          "createADConnectorUser": {
            "commands": {
              "a-create-ad-users": {
                "command": {
                  "Fn::Join": [
                    "",
                    [
                      "powershell.exe -ExecutionPolicy RemoteSigned C:\\cfn\\scripts\\AD-user-setup.ps1 -UserName user1 -Password ((Get-SECSecretValue -SecretId arn:",
                      {
                        "Ref": "AWS::Partition",
                      },
                      ":secretsmanager:us-east-1:111111111111:secret:/accelerator/ad-user/AcceleratorManagedActiveDirectory/user1).SecretString) -DomainAdminUser example\\admin -DomainAdminPassword ((Get-SECSecretValue -SecretId adminPwdSecretArn).SecretString) -PasswordNeverExpires Yes -UserEmailAddress example-user1@example.com; C:\\cfn\\scripts\\AD-user-setup.ps1 -UserName user2 -Password ((Get-SECSecretValue -SecretId arn:",
                      {
                        "Ref": "AWS::Partition",
                      },
                      ":secretsmanager:us-east-1:111111111111:secret:/accelerator/ad-user/AcceleratorManagedActiveDirectory/user2).SecretString) -DomainAdminUser example\\admin -DomainAdminPassword ((Get-SECSecretValue -SecretId adminPwdSecretArn).SecretString) -PasswordNeverExpires Yes -UserEmailAddress example-user2@example.com; C:\\cfn\\scripts\\AD-user-setup.ps1 -UserName admin -Password ((Get-SECSecretValue -SecretId adminPwdSecretArn).SecretString) -DomainAdminUser example\\admin -DomainAdminPassword ((Get-SECSecretValue -SecretId adminPwdSecretArn).SecretString) -PasswordNeverExpires Yes",
                    ],
                  ],
                },
                "waitAfterCompletion": "0",
              },
              "b-create-ad-groups": {
                "command": "powershell.exe -ExecutionPolicy RemoteSigned C:\\cfn\\scripts\\AD-group-setup.ps1 -GroupNames 'aws-Provisioning,aws-Billing,aws-Management-Admin,aws-Audit-Admin,aws-LogArchive-Admin,aws-Management-PowerUser,aws-Audit-PowerUser,aws-LogArchive-PowerUser,aws-Management-View,aws-Audit-View,aws-LogArchive-View,ADConnector-grp' -DomainAdminUser example\\admin -DomainAdminPassword ((Get-SECSecretValue -SecretId adminPwdSecretArn).SecretString)",
                "waitAfterCompletion": "0",
              },
              "c-configure-ad-users-groups": {
                "command": "powershell.exe -ExecutionPolicy RemoteSigned C:\\cfn\\scripts\\AD-user-group-setup.ps1 -GroupNames 'aws-Provisioning,aws-Management-PowerUser,aws-Audit-PowerUser,aws-LogArchive-PowerUser' -UserName user1 -DomainAdminUser example\\admin -DomainAdminPassword ((Get-SECSecretValue -SecretId adminPwdSecretArn).SecretString); C:\\cfn\\scripts\\AD-user-group-setup.ps1 -GroupNames 'aws-Provisioning,aws-Management-PowerUser,aws-Audit-PowerUser,aws-LogArchive-PowerUser,AWS Delegated Administrators' -UserName user2 -DomainAdminUser example\\admin -DomainAdminPassword ((Get-SECSecretValue -SecretId adminPwdSecretArn).SecretString)",
                "waitAfterCompletion": "0",
              },
              "d-configure-ad-group-permissions": {
                "command": "powershell.exe -ExecutionPolicy RemoteSigned C:\\cfn\\scripts\\AD-connector-permissions-setup.ps1 -GroupName ADConnector-grp -DomainAdminUser example\\admin -DomainAdminPassword ((Get-SECSecretValue -SecretId adminPwdSecretArn).SecretString)",
                "waitAfterCompletion": "0",
              },
            },
          },
          "finalize": {
            "commands": {
              "1-signal-success": {
                "command": "powershell.exe -Command "Write-AWSQuickStartStatus"",
                "waitAfterCompletion": "0",
              },
            },
          },
          "installRDS": {
            "commands": {
              "a-install-rds": {
                "command": "powershell.exe -Command "Install-WindowsFeature RSAT-RDS-Gateway,RSAT-AD-Tools"",
                "waitAfterCompletion": "0",
              },
            },
          },
          "join": {
            "commands": {
              "a-join-domain": {
                "command": "powershell.exe -Command "C:\\cfn\\scripts\\Join-Domain.ps1 -DomainName example.com -UserName example\\admin -Password ((Get-SECSecretValue -SecretId adminPwdSecretArn).SecretString)"",
                "waitAfterCompletion": "forever",
              },
            },
          },
          "setup": {
            "commands": {
              "a-set-execution-policy": {
                "command": "powershell.exe -Command "Set-ExecutionPolicy RemoteSigned -Force"",
                "waitAfterCompletion": "0",
              },
              "b-init-quickstart-module": {
                "command": {
                  "Fn::Join": [
                    "",
                    [
                      "powershell.exe -Command "New-AWSQuickStartResourceSignal -Stack Default  -Resource ActiveDirectoryConfigurationAcceleratorManagedActiveDirectoryInstanceCDCB7E02 -Region ",
                      {
                        "Ref": "AWS::Region",
                      },
                      """,
                    ],
                  ],
                },
                "waitAfterCompletion": "0",
              },
            },
            "files": {
              "C:\\Windows\\system32\\WindowsPowerShell\\v1.0\\Modules\\AWSQuickStart\\AWSQuickStart.psm1": {
                "content": "function New-AWSQuickStartWaitHandle {
    [CmdletBinding()]
    Param(
        [Parameter(Mandatory=$true, ValueFromPipeline=$true)]
        [string]
        $Handle,

        [Parameter(Mandatory=$false)]
        [string]
        $Path = 'HKLM:\\SOFTWARE\\AWSQuickStart\\',

        [Parameter(Mandatory=$false)]
        [switch]
        $Base64Handle
    )

    try {
        $ErrorActionPreference = "Stop"

        Write-Verbose "Creating $Path"
        New-Item $Path -Force

        if ($Base64Handle) {
            Write-Verbose "Trying to decode handle Base64 string as UTF8 string"
            $decodedHandle = [System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String($Handle))
            if ($decodedHandle -notlike "http*") {
                Write-Verbose "Now trying to decode handle Base64 string as Unicode string"
                $decodedHandle = [System.Text.Encoding]::Unicode.GetString([System.Convert]::FromBase64String($Handle))
            }
            Write-Verbose "Decoded handle string: $decodedHandle"
            $Handle = $decodedHandle
        }

        Write-Verbose "Creating Handle Registry Key"
        New-ItemProperty -Path $Path -Name Handle -Value $Handle -Force

        Write-Verbose "Creating ErrorCount Registry Key"
        New-ItemProperty -Path $Path -Name ErrorCount -Value 0 -PropertyType dword -Force
    }
    catch {
        Write-Verbose $_.Exception.Message
    }
}

function New-AWSQuickStartResourceSignal {
    [CmdletBinding()]
    Param(
        [Parameter(Mandatory=$true)]
        [string]
        $Stack,

        [Parameter(Mandatory=$true)]
        [string]
        $Resource,

        [Parameter(Mandatory=$true)]
        [string]
        $Region,

        [Parameter(Mandatory=$false)]
        [string]
        $Path = 'HKLM:\\SOFTWARE\\AWSQuickStart\\'
    )

    try {
        $ErrorActionPreference = "Stop"

        Write-Verbose "Creating $Path"
        New-Item $Path -Force

        Write-Verbose "Creating Stack Registry Key"
        New-ItemProperty -Path $Path -Name Stack -Value $Stack -Force

        Write-Verbose "Creating Resource Registry Key"
        New-ItemProperty -Path $Path -Name Resource -Value $Resource -Force

        Write-Verbose "Creating Region Registry Key"
        New-ItemProperty -Path $Path -Name Region -Value $Region -Force

        Write-Verbose "Creating ErrorCount Registry Key"
        New-ItemProperty -Path $Path -Name ErrorCount -Value 0 -PropertyType dword -Force
    }
    catch {
        Write-Verbose $_.Exception.Message
    }
}


function Get-AWSQuickStartErrorCount {
    [CmdletBinding()]
    Param(
        [Parameter(Mandatory=$false)]
        [string]
        $Path = 'HKLM:\\SOFTWARE\\AWSQuickStart\\'
    )

    process {
        try {
            Write-Verbose "Getting ErrorCount Registry Key"
            Get-ItemProperty -Path $Path -Name ErrorCount -ErrorAction Stop | Select-Object -ExpandProperty ErrorCount
        }
        catch {
            Write-Verbose $_.Exception.Message
        }
    }
}

function Set-AWSQuickStartErrorCount {
    [CmdletBinding()]
    Param(
        [Parameter(Mandatory, ValueFromPipeline=$true)]
        [int32]
        $Count,

        [Parameter(Mandatory=$false)]
        [string]
        $Path = 'HKLM:\\SOFTWARE\\AWSQuickStart\\'
    )

    process {
        try {
            $currentCount = Get-AWSQuickStartErrorCount
            $currentCount += $Count

            Write-Verbose "Creating ErrorCount Registry Key"
            Set-ItemProperty -Path $Path -Name ErrorCount -Value $currentCount -ErrorAction Stop
        }
        catch {
            Write-Verbose $_.Exception.Message
        }
    }
}

function Get-AWSQuickStartWaitHandle {
    [CmdletBinding()]
    Param(
        [Parameter(Mandatory=$false, ValueFromPipeline=$true)]
        [string]
        $Path = 'HKLM:\\SOFTWARE\\AWSQuickStart\\'
    )

    process {
        try {
            $ErrorActionPreference = "Stop"

            Write-Verbose "Getting Handle key value from $Path"
            $key = Get-ItemProperty $Path

            return $key.Handle
        }
        catch {
            Write-Verbose $_.Exception.Message
        }
    }
}

function Get-AWSQuickStartResourceSignal {
    [CmdletBinding()]
    Param(
        [Parameter(Mandatory=$false)]
        [string]
        $Path = 'HKLM:\\SOFTWARE\\AWSQuickStart\\'
    )

    try {
        $ErrorActionPreference = "Stop"

        Write-Verbose "Getting Stack, Resource, and Region key values from $Path"
        $key = Get-ItemProperty $Path
        $resourceSignal = @{
            Stack = $key.Stack
            Resource = $key.Resource
            Region = $key.Region
        }
        $toReturn = New-Object -TypeName PSObject -Property $resourceSignal

        if ($toReturn.Stack -and $toReturn.Resource -and $toReturn.Region) {
            return $toReturn
        } else {
            return $null
        }
    }
    catch {
        Write-Verbose $_.Exception.Message
    }
}

function Remove-AWSQuickStartWaitHandle {
    [CmdletBinding()]
    Param(
        [Parameter(Mandatory=$false, ValueFromPipeline=$true)]
        [string]
        $Path = 'HKLM:\\SOFTWARE\\AWSQuickStart\\'
    )

    process {
        try {
            $ErrorActionPreference = "Stop"

            Write-Verbose "Getting Handle key value from $Path"
            $key = Get-ItemProperty -Path $Path -Name Handle -ErrorAction SilentlyContinue

            if ($key) {
                Write-Verbose "Removing Handle key value from $Path"
                Remove-ItemProperty -Path $Path -Name Handle
            }
        }
        catch {
            Write-Verbose $_.Exception.Message
        }
    }
}

function Remove-AWSQuickStartResourceSignal {
    [CmdletBinding()]
    Param(
        [Parameter(Mandatory=$false)]
        [string]
        $Path = 'HKLM:\\SOFTWARE\\AWSQuickStart\\'
    )

    try {
        $ErrorActionPreference = "Stop"

        foreach ($keyName in @('Stack','Resource','Region')) {
            Write-Verbose "Getting Stack, Resource, and Region key values from $Path"
            $key = Get-ItemProperty -Path $Path -Name $keyName -ErrorAction SilentlyContinue

            if ($key) {
                Write-Verbose "Removing $keyName key value from $Path"
                Remove-ItemProperty -Path $Path -Name $keyName
            }
        }
    }
    catch {
        Write-Verbose $_.Exception.Message
    }
}

function Write-AWSQuickStartEvent {
    [CmdletBinding()]
    Param(
        [Parameter(Mandatory, ValueFromPipelineByPropertyName=$true)]
        [string]
        $Message,

        [Parameter(Mandatory=$false)]
        [string]
        $EntryType = 'Error'
    )

    process {
        Write-Verbose "Checking for AWSQuickStart Eventlog Source"
        if(![System.Diagnostics.EventLog]::SourceExists('AWSQuickStart')) {
            New-EventLog -LogName Application -Source AWSQuickStart -ErrorAction SilentlyContinue
        }
        else {
            Write-Verbose "AWSQuickStart Eventlog Source exists"
        }

        Write-Verbose "Writing message to application log"

        try {
            Write-EventLog -LogName Application -Source AWSQuickStart -EntryType $EntryType -EventId 1001 -Message $Message
        }
        catch {
            Write-Verbose $_.Exception.Message
        }
    }
}

function Write-AWSQuickStartException {
    [CmdletBinding()]
    Param(
        [Parameter(Mandatory, ValueFromPipeline=$true)]
        [System.Management.Automation.ErrorRecord]
        $ErrorRecord
    )

    process {
        try {
            Write-Verbose "Incrementing error count"
            Set-AWSQuickStartErrorCount -Count 1

            Write-Verbose "Getting total error count"
            $errorTotal = Get-AWSQuickStartErrorCount

            $errorMessage = "Command failure in {0} {1} on line {2} \`nException: {3}" -f $ErrorRecord.InvocationInfo.MyCommand.name,
                                                        $ErrorRecord.InvocationInfo.ScriptName, $ErrorRecord.InvocationInfo.ScriptLineNumber, $ErrorRecord.Exception.ToString()

            $CmdSafeErrorMessage = $errorMessage -replace '[^a-zA-Z0-9\\s\\.\\[\\]\\-,:_\\\\\\/\\(\\)]', ''
            if ($CmdSafeErrorMessage.length -gt 255) {
                $CmdSafeErrorMessage = $CmdSafeErrorMessage.substring(0,252) + '...'
            }

            $handle = Get-AWSQuickStartWaitHandle -ErrorAction SilentlyContinue
            if ($handle) {
                Invoke-Expression "cfn-signal.exe -e 1 --reason='$CmdSafeErrorMessage' '$handle'"
            } else {
                $resourceSignal = Get-AWSQuickStartResourceSignal -ErrorAction SilentlyContinue
                if ($resourceSignal) {
                    Invoke-Expression "cfn-signal.exe -e 1 --stack '$($resourceSignal.Stack)' --resource '$($resourceSignal.Resource)' --region '$($resourceSignal.Region)'"
                } else {
                    throw "No handle or stack/resource/region found in registry"
                }
            }
        }
        catch {
            Write-Verbose $_.Exception.Message
        }
        finally {
            Write-AWSQuickStartEvent -Message $errorMessage
            # throwing an exception to force cfn-init execution to stop
            throw $CmdSafeErrorMessage
        }
    }
}

function Write-AWSQuickStartStatus {
    [CmdletBinding()]
    Param()

    process {
        try {
            Write-Verbose "Checking error count"
            if((Get-AWSQuickStartErrorCount) -eq 0) {
                Write-Verbose "Getting Handle"
                $handle = Get-AWSQuickStartWaitHandle -ErrorAction SilentlyContinue
                if ($handle) {
                    Invoke-Expression "cfn-signal.exe -e 0 '$handle'"
                } else {
                    $resourceSignal = Get-AWSQuickStartResourceSignal -ErrorAction SilentlyContinue
                    if ($resourceSignal) {
                        Invoke-Expression "cfn-signal.exe -e 0 --stack '$($resourceSignal.Stack)' --resource '$($resourceSignal.Resource)' --region '$($resourceSignal.Region)'"
                    } else {
                        throw "No handle or stack/resource/region found in registry"
                    }
                }
            }
        }
        catch {
            Write-Verbose $_.Exception.Message
        }
    }
}
",
              },
              "c:\\cfn\\cfn-hup.conf": {
                "content": {
                  "Fn::Join": [
                    "",
                    [
                      "[main]
 stack=Default
 region=",
                      {
                        "Ref": "AWS::Region",
                      },
                      "
",
                    ],
                  ],
                },
              },
              "c:\\cfn\\hooks.d\\cfn-auto-reloader.conf": {
                "content": {
                  "Fn::Join": [
                    "",
                    [
                      "[cfn-auto-reloader-hook]
 triggers=post.update
 path=Resources.ActiveDirectoryConfigurationAcceleratorManagedActiveDirectoryInstanceCDCB7E02.Metadata.AWS::CloudFormation::Init
 action=cfn-init.exe -v -c config -s ",
                      {
                        "Ref": "AWS::StackId",
                      },
                      " -r ActiveDirectoryConfigurationAcceleratorManagedActiveDirectoryInstanceCDCB7E02 --region ",
                      {
                        "Ref": "AWS::Region",
                      },
                      "
",
                    ],
                  ],
                },
              },
              "c:\\cfn\\scripts\\AD-group-setup.ps1": {
                "content": "[CmdletBinding()]
param(
    [string]
    $GroupNames,

    [string]
    $DomainAdminUser,

    [string]
    $DomainAdminPassword
)

# Turned off logging;
# Start-Transcript -Path C:\\cfn\\log\\AD-connector-setup.txt

#This part of the code gets the domain name and splits it
$fdn=(Get-WmiObject Win32_ComputerSystem).Domain
$dom,$ext=$fdn.split('.')

$securePassword = ConvertTo-SecureString $DomainAdminPassword -AsPlainText -Force
$credential = New-Object System.Management.Automation.PSCredential $DomainAdminUser, $securePassword

$groupsArray = $GroupNames -split ','

for ($i=0; $i -lt $groupsArray.Length; $i++) {
    $groupName = $groupsArray[$i]
    $groupExists = Get-ADGroup -Filter {Name -eq $groupName} -Credential $credential
    if($null -eq $groupExists) {
        #Create Group
        New-ADGroup -Name $groupName -GroupCategory Security -GroupScope Global -Credential $credential
    }
}",
              },
              "c:\\cfn\\scripts\\Join-Domain.ps1": {
                "content": "[CmdletBinding()]
param(
    [string]
    $DomainName,

    [string]
    $UserName,

    [string]
    $Password
)

try {
    $ErrorActionPreference = "Stop"

    $pass = ConvertTo-SecureString $Password -AsPlainText -Force
    $cred = New-Object System.Management.Automation.PSCredential -ArgumentList $UserName,$pass

    Add-Computer -DomainName $DomainName -Credential $cred -ErrorAction Stop

    # Execute restart after script exit and allow time for external services
    $shutdown = Start-Process -FilePath "shutdown.exe" -ArgumentList @("/r", "/t 10") -Wait -NoNewWindow -PassThru
    if ($shutdown.ExitCode -ne 0) {
        throw "[ERROR] shutdown.exe exit code was not 0. It was actually $($shutdown.ExitCode)."
    }
}
catch {
    $_ | Write-AWSQuickStartException
}
",
              },
            },
            "services": {
              "windows": {
                "cfn-hup": {
                  "enabled": "true",
                  "ensureRunning": "true",
                  "files": [
                    "c:\\cfn\\cfn-hup.conf",
                    "c:\\cfn\\hooks.d\\cfn-auto-reloader.conf",
                  ],
                },
              },
            },
          },
        },
      },
      "Properties": {
        "BlockDeviceMappings": [
          {
            "DeviceName": "/dev/sda1",
            "Ebs": {
              "Encrypted": true,
              "VolumeSize": 50,
              "VolumeType": "gp2",
            },
          },
        ],
        "DisableApiTermination": false,
        "IamInstanceProfile": "instanceRoleName",
        "ImageId": {
          "Ref": "SsmParameterValueawsserviceamiwindowslatestWindowsServer2016EnglishFullBaseC96584B6F00A464EAD1953AFF4B05118Parameter",
        },
        "InstanceType": "t3.large",
        "LaunchTemplate": {
          "LaunchTemplateName": "AcceleratorManagedActiveDirectoryLaunchTemplate",
          "Version": {
            "Fn::GetAtt": [
              "ActiveDirectoryConfigurationAcceleratorManagedActiveDirectoryLaunchTemplate077F7F9E",
              "LatestVersionNumber",
            ],
          },
        },
        "SecurityGroupIds": [
          "securityGroupId",
        ],
        "SubnetId": "subnetId",
        "Tags": [
          {
            "Key": "Name",
            "Value": "AcceleratorManagedActiveDirectoryConfiguringInstance",
          },
        ],
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "<script>
 cfn-init.exe -v -c config -s ",
                {
                  "Ref": "AWS::StackId",
                },
                " -r ActiveDirectoryConfigurationAcceleratorManagedActiveDirectoryInstanceCDCB7E02 --region ",
                {
                  "Ref": "AWS::Region",
                },
                " 
 echo 'Signal the status from cfn-init'
 cfn-signal -e $LASTEXITCODE --stack Default --resource ActiveDirectoryConfigurationAcceleratorManagedActiveDirectoryInstanceCDCB7E02 --region ",
                {
                  "Ref": "AWS::Region",
                },
                "
 </script>
",
              ],
            ],
          },
        },
      },
      "Type": "AWS::EC2::Instance",
    },
    "ActiveDirectoryConfigurationAcceleratorManagedActiveDirectoryKmsPolicy4922950D": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "kms:Decrypt",
              "Effect": "Allow",
              "Resource": "secretKeyArn",
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "ActiveDirectoryConfigurationAcceleratorManagedActiveDirectoryKmsPolicy4922950D",
        "Roles": [
          "instanceRoleName",
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "ActiveDirectoryConfigurationAcceleratorManagedActiveDirectoryLaunchTemplate077F7F9E": {
      "Properties": {
        "LaunchTemplateData": {
          "MetadataOptions": {
            "HttpEndpoint": "enabled",
            "HttpTokens": "required",
          },
        },
        "LaunchTemplateName": "AcceleratorManagedActiveDirectoryLaunchTemplate",
      },
      "Type": "AWS::EC2::LaunchTemplate",
    },
  },
}
`;
